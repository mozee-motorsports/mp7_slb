
ShutdownLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  00005098  2**0
                  CONTENTS
  4 .ARM          00000008  08003904  08003904  00004904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800390c  0800390c  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800390c  0800390c  0000490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003910  08003910  00004910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003914  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000098  080039ac  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080039ac  000052b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b08e  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae9  00000000  00000000  00010156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00011c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074b  00000000  00000000  000125e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed4b  00000000  00000000  00012d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c225  00000000  00000000  00031a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf305  00000000  00000000  0003dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcfa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  000fcfe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ffd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800387c 	.word	0x0800387c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800387c 	.word	0x0800387c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fb23 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f827 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f871 	bl	80006a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <main+0x58>)
 80005c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005c8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <main+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <main+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <main+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <main+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005e2:	4909      	ldr	r1, [pc, #36]	@ (8000608 <main+0x58>)
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fa41 	bl	8000a6c <BSP_COM_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <main+0x44>
  {
    Error_Handler();
 80005f0:	f000 f8cc 	bl	800078c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t currentState;
  while (1)
  {
    currentState = readPinStates();
 80005f4:	f000 f8d0 	bl	8000798 <readPinStates>
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]

    HAL_Delay(100);  // Optional delay for debounce
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f000 fb6f 	bl	8000ce0 <HAL_Delay>
    currentState = readPinStates();
 8000602:	bf00      	nop
 8000604:	e7f6      	b.n	80005f4 <main+0x44>
 8000606:	bf00      	nop
 8000608:	200000b4 	.word	0x200000b4

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2238      	movs	r2, #56	@ 0x38
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fb15 	bl	8002c4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fe0e 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	2340      	movs	r3, #64	@ 0x40
 8000640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800064a:	2304      	movs	r3, #4
 800064c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800064e:	2355      	movs	r3, #85	@ 0x55
 8000650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fea8 	bl	80013b8 <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800066e:	f000 f88d 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2303      	movs	r3, #3
 8000678:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f9a6 	bl	80019dc <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000696:	f000 f879 	bl	800078c <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b31      	ldr	r3, [pc, #196]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a30      	ldr	r2, [pc, #192]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <MX_GPIO_Init+0xdc>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDDisable_GPIO_Port, LEDDisable_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000708:	481e      	ldr	r0, [pc, #120]	@ (8000784 <MX_GPIO_Init+0xe0>)
 800070a:	f000 fd89 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ToCBRB_Pin BOTS_Pin */
  GPIO_InitStruct.Pin = ToCBRB_Pin|BOTS_Pin;
 800070e:	23a0      	movs	r3, #160	@ 0xa0
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000724:	f000 fbe2 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : BRB_Pin FromCBRB_Pin */
  GPIO_InitStruct.Pin = BRB_Pin|FromCBRB_Pin;
 8000728:	2330      	movs	r3, #48	@ 0x30
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	4813      	ldr	r0, [pc, #76]	@ (8000788 <MX_GPIO_Init+0xe4>)
 800073c:	f000 fbd6 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : TSMS_Pin AMS_Pin */
  GPIO_InitStruct.Pin = TSMS_Pin|AMS_Pin;
 8000740:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	@ (8000784 <MX_GPIO_Init+0xe0>)
 8000756:	f000 fbc9 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDDisable_Pin */
  GPIO_InitStruct.Pin = LEDDisable_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDDisable_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_GPIO_Init+0xe0>)
 8000774:	f000 fbba 	bl	8000eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400
 8000788:	48000800 	.word	0x48000800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <readPinStates>:

uint16_t shutdownLoopPins[NUM_SWITCHES] = {BRB_Pin,
BOTS_Pin, AMS_Pin, ToCBRB_Pin, FromCBRB_Pin, TSMS_Pin, LEDDisable_Pin};

uint8_t readPinStates(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
    uint8_t state = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < NUM_SWITCHES; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	e021      	b.n	80007ec <readPinStates+0x54>
    {
        if (HAL_GPIO_ReadPin(shutdownLoopPorts[i], shutdownLoopPins[i]) == GPIO_PIN_SET)
 80007a8:	4a14      	ldr	r2, [pc, #80]	@ (80007fc <readPinStates+0x64>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b0:	4913      	ldr	r1, [pc, #76]	@ (8000800 <readPinStates+0x68>)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007b8:	4619      	mov	r1, r3
 80007ba:	4610      	mov	r0, r2
 80007bc:	f000 fd18 	bl	80011f0 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d10f      	bne.n	80007e6 <readPinStates+0x4e>
        {
            //going under assumption that the pin states 
            state |= (1 << i);  // Set the corresponding bit if the switch is on
 80007c6:	2201      	movs	r2, #1
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	b25a      	sxtb	r2, r3
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	71fb      	strb	r3, [r7, #7]
            printf("bit %d: %d\n", i, state);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	461a      	mov	r2, r3
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	4808      	ldr	r0, [pc, #32]	@ (8000804 <readPinStates+0x6c>)
 80007e2:	f002 f9dd 	bl	8002ba0 <iprintf>
    for (int i = 0; i < NUM_SWITCHES; i++)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	ddda      	ble.n	80007a8 <readPinStates+0x10>
            
        }
    }
    return state;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	2000001c 	.word	0x2000001c
 8000804:	08003894 	.word	0x08003894

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <HAL_MspInit+0x44>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6613      	str	r3, [r2, #96]	@ 0x60
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_MspInit+0x44>)
 800081c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000830:	6593      	str	r3, [r2, #88]	@ 0x58
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <HAL_MspInit+0x44>)
 8000834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800083e:	f000 fdab 	bl	8001398 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <NMI_Handler+0x4>

08000858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <MemManage_Handler+0x4>

08000868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a6:	f000 f9fd 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}

080008ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	60f8      	str	r0, [r7, #12]
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e00a      	b.n	80008d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008c0:	f3af 8000 	nop.w
 80008c4:	4601      	mov	r1, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	60ba      	str	r2, [r7, #8]
 80008cc:	b2ca      	uxtb	r2, r1
 80008ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	429a      	cmp	r2, r3
 80008dc:	dbf0      	blt.n	80008c0 <_read+0x12>
  }

  return len;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e009      	b.n	800090e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	60ba      	str	r2, [r7, #8]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f914 	bl	8000b30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	dbf1      	blt.n	80008fa <_write+0x12>
  }
  return len;
 8000916:	687b      	ldr	r3, [r7, #4]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <_close>:

int _close(int file)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000948:	605a      	str	r2, [r3, #4]
  return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_isatty>:

int _isatty(int file)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000960:	2301      	movs	r3, #1
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f002 f996 	bl	8002ce8 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2001c000 	.word	0x2001c000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	200000c4 	.word	0x200000c4
 80009f0:	200002b0 	.word	0x200002b0

080009f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff ffea 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a20:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a22:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <LoopForever+0xe>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a38:	4c0a      	ldr	r4, [pc, #40]	@ (8000a64 <LoopForever+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f002 f955 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fdb1 	bl	80005b0 <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   r0, =_estack
 8000a50:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000a5c:	08003914 	.word	0x08003914
  ldr r2, =_sbss
 8000a60:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000a64:	200002b0 	.word	0x200002b0

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>
	...

08000a6c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d903      	bls.n	8000a8a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a82:	f06f 0301 	mvn.w	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e018      	b.n	8000abc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2294      	movs	r2, #148	@ 0x94
 8000a8e:	fb02 f303 	mul.w	r3, r2, r3
 8000a92:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac8 <BSP_COM_Init+0x5c>)
 8000a94:	4413      	add	r3, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f866 	bl	8000b68 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2294      	movs	r2, #148	@ 0x94
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <BSP_COM_Init+0x5c>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	6839      	ldr	r1, [r7, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f80e 	bl	8000acc <MX_LPUART1_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000ab6:	f06f 0303 	mvn.w	r3, #3
 8000aba:	e000      	b.n	8000abe <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000abc:	68fb      	ldr	r3, [r7, #12]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000c8 	.word	0x200000c8

08000acc <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_LPUART1_Init+0x60>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	220c      	movs	r2, #12
 8000aea:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	895b      	ldrh	r3, [r3, #10]
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	891b      	ldrh	r3, [r3, #8]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	899b      	ldrh	r3, [r3, #12]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b18:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f001 f97a 	bl	8001e14 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000030 	.word	0x20000030

08000b30 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <__io_putchar+0x30>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2394      	movs	r3, #148	@ 0x94
 8000b40:	fb02 f303 	mul.w	r3, r2, r3
 8000b44:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <__io_putchar+0x34>)
 8000b46:	1898      	adds	r0, r3, r2
 8000b48:	1d39      	adds	r1, r7, #4
 8000b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f001 f9ba 	bl	8001ec8 <HAL_UART_Transmit>
  return ch;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000015c 	.word	0x2000015c
 8000b64:	200000c8 	.word	0x200000c8

08000b68 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000b70:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <COM1_MspInit+0x94>)
 8000b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <COM1_MspInit+0x94>)
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ba4:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <COM1_MspInit+0x94>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <COM1_MspInit+0x94>)
 8000bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd6:	f000 f989 	bl	8000eec <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000be2:	230c      	movs	r3, #12
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf0:	f000 f97c 	bl	8000eec <HAL_GPIO_Init>
}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	@ 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f93c 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 f80d 	bl	8000c30 <HAL_InitTick>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	e001      	b.n	8000c26 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c22:	f7ff fdf1 	bl	8000808 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c26:	79fb      	ldrb	r3, [r7, #7]

}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_InitTick+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d022      	beq.n	8000c8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_InitTick+0x6c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <HAL_InitTick+0x68>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f93a 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10f      	bne.n	8000c84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d809      	bhi.n	8000c7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c72:	f000 f914 	bl	8000e9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_InitTick+0x70>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e007      	b.n	8000c8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e004      	b.n	8000c8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e001      	b.n	8000c8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000038 	.word	0x20000038
 8000c9c:	2000002c 	.word	0x2000002c
 8000ca0:	20000034 	.word	0x20000034

08000ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a03      	ldr	r2, [pc, #12]	@ (8000cc0 <HAL_IncTick+0x1c>)
 8000cb4:	6013      	str	r3, [r2, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000160 	.word	0x20000160
 8000cc4:	20000038 	.word	0x20000038

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	@ (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000160 	.word	0x20000160

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf8:	d004      	beq.n	8000d04 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_Delay+0x40>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d04:	bf00      	nop
 8000d06:	f7ff ffdf 	bl	8000cc8 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d8f7      	bhi.n	8000d06 <HAL_Delay+0x26>
  {
  }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000038 	.word	0x20000038

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	db0a      	blt.n	8000db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	490c      	ldr	r1, [pc, #48]	@ (8000dd4 <__NVIC_SetPriority+0x4c>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	b2d2      	uxtb	r2, r2
 8000daa:	440b      	add	r3, r1
 8000dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db0:	e00a      	b.n	8000dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <__NVIC_SetPriority+0x50>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 030f 	and.w	r3, r3, #15
 8000dbe:	3b04      	subs	r3, #4
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	761a      	strb	r2, [r3, #24]
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e100 	.word	0xe000e100
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f1c3 0307 	rsb	r3, r3, #7
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf28      	it	cs
 8000dfa:	2304      	movcs	r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3304      	adds	r3, #4
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d902      	bls.n	8000e0c <NVIC_EncodePriority+0x30>
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3b03      	subs	r3, #3
 8000e0a:	e000      	b.n	8000e0e <NVIC_EncodePriority+0x32>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	f04f 32ff 	mov.w	r2, #4294967295
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e24:	f04f 31ff 	mov.w	r1, #4294967295
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	4313      	orrs	r3, r2
         );
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3724      	adds	r7, #36	@ 0x24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e54:	d301      	bcc.n	8000e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00f      	b.n	8000e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <SysTick_Config+0x40>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e62:	210f      	movs	r1, #15
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f7ff ff8e 	bl	8000d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <SysTick_Config+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e72:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <SysTick_Config+0x40>)
 8000e74:	2207      	movs	r2, #7
 8000e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000e010 	.word	0xe000e010

08000e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff ff47 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff5e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff90 	bl	8000ddc <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5f 	bl	8000d88 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffb2 	bl	8000e44 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000efa:	e15a      	b.n	80011b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 814c 	beq.w	80011ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d005      	beq.n	8000f2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 0201 	and.w	r2, r3, #1
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d017      	beq.n	8000fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d123      	bne.n	800101e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	6939      	ldr	r1, [r7, #16]
 800101a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0203 	and.w	r2, r3, #3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80a6 	beq.w	80011ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	4b5b      	ldr	r3, [pc, #364]	@ (80011d0 <HAL_GPIO_Init+0x2e4>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	4a5a      	ldr	r2, [pc, #360]	@ (80011d0 <HAL_GPIO_Init+0x2e4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6613      	str	r3, [r2, #96]	@ 0x60
 800106c:	4b58      	ldr	r3, [pc, #352]	@ (80011d0 <HAL_GPIO_Init+0x2e4>)
 800106e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001078:	4a56      	ldr	r2, [pc, #344]	@ (80011d4 <HAL_GPIO_Init+0x2e8>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x1f8>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a4c      	ldr	r2, [pc, #304]	@ (80011d8 <HAL_GPIO_Init+0x2ec>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x1f4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4b      	ldr	r2, [pc, #300]	@ (80011dc <HAL_GPIO_Init+0x2f0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x1f0>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4a      	ldr	r2, [pc, #296]	@ (80011e0 <HAL_GPIO_Init+0x2f4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1ec>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a49      	ldr	r2, [pc, #292]	@ (80011e4 <HAL_GPIO_Init+0x2f8>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1e8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a48      	ldr	r2, [pc, #288]	@ (80011e8 <HAL_GPIO_Init+0x2fc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1e4>
 80010cc:	2305      	movs	r3, #5
 80010ce:	e00a      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010d0:	2306      	movs	r3, #6
 80010d2:	e008      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010d4:	2304      	movs	r3, #4
 80010d6:	e006      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010d8:	2303      	movs	r3, #3
 80010da:	e004      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010dc:	2302      	movs	r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <HAL_GPIO_Init+0x1fa>
 80010e4:	2300      	movs	r3, #0
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	f002 0203 	and.w	r2, r2, #3
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	4093      	lsls	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f6:	4937      	ldr	r1, [pc, #220]	@ (80011d4 <HAL_GPIO_Init+0x2e8>)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001104:	4b39      	ldr	r3, [pc, #228]	@ (80011ec <HAL_GPIO_Init+0x300>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001128:	4a30      	ldr	r2, [pc, #192]	@ (80011ec <HAL_GPIO_Init+0x300>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <HAL_GPIO_Init+0x300>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001152:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <HAL_GPIO_Init+0x300>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001158:	4b24      	ldr	r3, [pc, #144]	@ (80011ec <HAL_GPIO_Init+0x300>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117c:	4a1b      	ldr	r2, [pc, #108]	@ (80011ec <HAL_GPIO_Init+0x300>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <HAL_GPIO_Init+0x300>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <HAL_GPIO_Init+0x300>)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f47f ae9d 	bne.w	8000efc <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000c00 	.word	0x48000c00
 80011e4:	48001000 	.word	0x48001000
 80011e8:	48001400 	.word	0x48001400
 80011ec:	40010400 	.word	0x40010400

080011f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e001      	b.n	8001212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e002      	b.n	8001244 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d141      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800125e:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126a:	d131      	bne.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800126c:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001272:	4a46      	ldr	r2, [pc, #280]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001278:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	4b43      	ldr	r3, [pc, #268]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001284:	4a41      	ldr	r2, [pc, #260]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800128c:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2232      	movs	r2, #50	@ 0x32
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	4a3f      	ldr	r2, [pc, #252]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a2:	e002      	b.n	80012aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b6:	d102      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f2      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012be:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ca:	d158      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e057      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d0:	4b2e      	ldr	r3, [pc, #184]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012d6:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012e0:	e04d      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e8:	d141      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f6:	d131      	bne.n	800135c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fe:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001304:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001310:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001318:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2232      	movs	r2, #50	@ 0x32
 800131e:	fb02 f303 	mul.w	r3, r2, r3
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9b      	lsrs	r3, r3, #18
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	e002      	b.n	8001336 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3b01      	subs	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001342:	d102      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f2      	bne.n	8001330 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001356:	d112      	bne.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e011      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001368:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800136c:	e007      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800136e:	4b07      	ldr	r3, [pc, #28]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001378:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800137c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40007000 	.word	0x40007000
 8001390:	2000002c 	.word	0x2000002c
 8001394:	431bde83 	.word	0x431bde83

08001398 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a6:	6093      	str	r3, [r2, #8]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e2fe      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d075      	beq.n	80014c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d6:	4b97      	ldr	r3, [pc, #604]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e0:	4b94      	ldr	r3, [pc, #592]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d102      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3e>
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d002      	beq.n	80013fc <HAL_RCC_OscConfig+0x44>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b08      	cmp	r3, #8
 80013fa:	d10b      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x108>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d157      	bne.n	80014c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e2d9      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141c:	d106      	bne.n	800142c <HAL_RCC_OscConfig+0x74>
 800141e:	4b85      	ldr	r3, [pc, #532]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a84      	ldr	r2, [pc, #528]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x98>
 8001436:	4b7f      	ldr	r3, [pc, #508]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7e      	ldr	r2, [pc, #504]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b7c      	ldr	r3, [pc, #496]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7b      	ldr	r2, [pc, #492]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 8001450:	4b78      	ldr	r3, [pc, #480]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a77      	ldr	r2, [pc, #476]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b75      	ldr	r3, [pc, #468]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a74      	ldr	r2, [pc, #464]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc2a 	bl	8000cc8 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc26 	bl	8000cc8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	@ 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e29e      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148a:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xc0>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fc16 	bl	8000cc8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc12 	bl	8000cc8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	@ 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e28a      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b2:	4b60      	ldr	r3, [pc, #384]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0xe8>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d075      	beq.n	80015ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b59      	ldr	r3, [pc, #356]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d8:	4b56      	ldr	r3, [pc, #344]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x136>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x13c>
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d11f      	bne.n	8001534 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x154>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e25d      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b49      	ldr	r3, [pc, #292]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4946      	ldr	r1, [pc, #280]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001520:	4b45      	ldr	r3, [pc, #276]	@ (8001638 <HAL_RCC_OscConfig+0x280>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fb83 	bl	8000c30 <HAL_InitTick>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d043      	beq.n	80015b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e249      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a3c      	ldr	r2, [pc, #240]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fbbe 	bl	8000cc8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fbba 	bl	8000cc8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e232      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001562:	4b34      	ldr	r3, [pc, #208]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	061b      	lsls	r3, r3, #24
 800157c:	492d      	ldr	r1, [pc, #180]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
 8001582:	e01a      	b.n	80015ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001584:	4b2b      	ldr	r3, [pc, #172]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a2a      	ldr	r2, [pc, #168]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800158a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb9a 	bl	8000cc8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fb96 	bl	8000cc8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e20e      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1e0>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d041      	beq.n	800164a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01c      	beq.n	8001608 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d4:	4a17      	ldr	r2, [pc, #92]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fb73 	bl	8000cc8 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb6f 	bl	8000cc8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1e7      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0ef      	beq.n	80015e6 <HAL_RCC_OscConfig+0x22e>
 8001606:	e020      	b.n	800164a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160e:	4a09      	ldr	r2, [pc, #36]	@ (8001634 <HAL_RCC_OscConfig+0x27c>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fb56 	bl	8000cc8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800161e:	e00d      	b.n	800163c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fb52 	bl	8000cc8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d906      	bls.n	800163c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1ca      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	4b8c      	ldr	r3, [pc, #560]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1ea      	bne.n	8001620 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80a6 	beq.w	80017a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800165c:	4b84      	ldr	r3, [pc, #528]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x2b4>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x2b6>
 800166c:	2300      	movs	r3, #0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00d      	beq.n	800168e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b7f      	ldr	r3, [pc, #508]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001676:	4a7e      	ldr	r2, [pc, #504]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6593      	str	r3, [r2, #88]	@ 0x58
 800167e:	4b7c      	ldr	r3, [pc, #496]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168e:	4b79      	ldr	r3, [pc, #484]	@ (8001874 <HAL_RCC_OscConfig+0x4bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169a:	4b76      	ldr	r3, [pc, #472]	@ (8001874 <HAL_RCC_OscConfig+0x4bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a75      	ldr	r2, [pc, #468]	@ (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fb0f 	bl	8000cc8 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fb0b 	bl	8000cc8 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e183      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001874 <HAL_RCC_OscConfig+0x4bc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_RCC_OscConfig+0x32e>
 80016d4:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	4a65      	ldr	r2, [pc, #404]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016e4:	e024      	b.n	8001730 <HAL_RCC_OscConfig+0x378>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d110      	bne.n	8001710 <HAL_RCC_OscConfig+0x358>
 80016ee:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001704:	4a5a      	ldr	r2, [pc, #360]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800170e:	e00f      	b.n	8001730 <HAL_RCC_OscConfig+0x378>
 8001710:	4b57      	ldr	r3, [pc, #348]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	4a56      	ldr	r2, [pc, #344]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001720:	4b53      	ldr	r3, [pc, #332]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001726:	4a52      	ldr	r2, [pc, #328]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d016      	beq.n	8001766 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fac6 	bl	8000cc8 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	e00a      	b.n	8001756 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fac2 	bl	8000cc8 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e138      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001756:	4b46      	ldr	r3, [pc, #280]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ed      	beq.n	8001740 <HAL_RCC_OscConfig+0x388>
 8001764:	e015      	b.n	8001792 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff faaf 	bl	8000cc8 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff faab 	bl	8000cc8 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e121      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001784:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ed      	bne.n	800176e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179c:	4a34      	ldr	r2, [pc, #208]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800179e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03c      	beq.n	800182a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80017ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017be:	4a2c      	ldr	r2, [pc, #176]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa7e 	bl	8000cc8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d0:	f7ff fa7a 	bl	8000cc8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0f2      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ef      	beq.n	80017d0 <HAL_RCC_OscConfig+0x418>
 80017f0:	e01b      	b.n	800182a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff fa61 	bl	8000cc8 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180a:	f7ff fa5d 	bl	8000cc8 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0d5      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ef      	bne.n	800180a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80c9 	beq.w	80019c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b0c      	cmp	r3, #12
 800183e:	f000 8083 	beq.w	8001948 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d15e      	bne.n	8001908 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a08      	ldr	r2, [pc, #32]	@ (8001870 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fa37 	bl	8000cc8 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e00c      	b.n	8001878 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff fa33 	bl	8000cc8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d905      	bls.n	8001878 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e0ab      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
 8001870:	40021000 	.word	0x40021000
 8001874:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001878:	4b55      	ldr	r3, [pc, #340]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ec      	bne.n	800185e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001884:	4b52      	ldr	r3, [pc, #328]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	4b52      	ldr	r3, [pc, #328]	@ (80019d4 <HAL_RCC_OscConfig+0x61c>)
 800188a:	4013      	ands	r3, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6a11      	ldr	r1, [r2, #32]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001894:	3a01      	subs	r2, #1
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800189e:	0212      	lsls	r2, r2, #8
 80018a0:	4311      	orrs	r1, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018a6:	0852      	lsrs	r2, r2, #1
 80018a8:	3a01      	subs	r2, #1
 80018aa:	0552      	lsls	r2, r2, #21
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018b2:	0852      	lsrs	r2, r2, #1
 80018b4:	3a01      	subs	r2, #1
 80018b6:	0652      	lsls	r2, r2, #25
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018be:	06d2      	lsls	r2, r2, #27
 80018c0:	430a      	orrs	r2, r1
 80018c2:	4943      	ldr	r1, [pc, #268]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c8:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018d4:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4a3d      	ldr	r2, [pc, #244]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f9f2 	bl	8000cc8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f9ee 	bl	8000cc8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e066      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x530>
 8001906:	e05e      	b.n	80019c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a30      	ldr	r2, [pc, #192]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 800190e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f9d8 	bl	8000cc8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f9d4 	bl	8000cc8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04c      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192e:	4b28      	ldr	r3, [pc, #160]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800193a:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4924      	ldr	r1, [pc, #144]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 8001940:	4b25      	ldr	r3, [pc, #148]	@ (80019d8 <HAL_RCC_OscConfig+0x620>)
 8001942:	4013      	ands	r3, r2
 8001944:	60cb      	str	r3, [r1, #12]
 8001946:	e03e      	b.n	80019c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e039      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001954:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_RCC_OscConfig+0x618>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	429a      	cmp	r2, r3
 8001966:	d12c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	3b01      	subs	r3, #1
 8001974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d123      	bne.n	80019c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d11b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001994:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d113      	bne.n	80019c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	3b01      	subs	r3, #1
 80019bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40021000 	.word	0x40021000
 80019d4:	019f800c 	.word	0x019f800c
 80019d8:	feeefffc 	.word	0xfeeefffc

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e11e      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b91      	ldr	r3, [pc, #580]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b8e      	ldr	r3, [pc, #568]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 020f 	bic.w	r2, r3, #15
 8001a0a:	498c      	ldr	r1, [pc, #560]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b8a      	ldr	r3, [pc, #552]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e106      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d073      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d129      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b81      	ldr	r3, [pc, #516]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0f4      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a48:	f000 f99e 	bl	8001d88 <RCC_GetSysClockFreqFromPLLSource>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4a7c      	ldr	r2, [pc, #496]	@ (8001c44 <HAL_RCC_ClockConfig+0x268>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d93f      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a56:	4b7a      	ldr	r3, [pc, #488]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d009      	beq.n	8001a76 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d033      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d12f      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a76:	4b72      	ldr	r3, [pc, #456]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a7e:	4a70      	ldr	r2, [pc, #448]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e024      	b.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a94:	4b6a      	ldr	r3, [pc, #424]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0c6      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa4:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0be      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ab4:	f000 f8ce 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4a61      	ldr	r2, [pc, #388]	@ (8001c44 <HAL_RCC_ClockConfig+0x268>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d909      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aca:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4957      	ldr	r1, [pc, #348]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae8:	f7ff f8ee 	bl	8000cc8 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff f8ea 	bl	8000cc8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e095      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d023      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b43      	ldr	r3, [pc, #268]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a42      	ldr	r2, [pc, #264]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b3a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b48:	4b3d      	ldr	r3, [pc, #244]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b50:	4a3b      	ldr	r2, [pc, #236]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4936      	ldr	r1, [pc, #216]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b80      	cmp	r3, #128	@ 0x80
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b72:	4b33      	ldr	r3, [pc, #204]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	4a32      	ldr	r2, [pc, #200]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d21d      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f023 020f 	bic.w	r2, r3, #15
 8001b94:	4929      	ldr	r1, [pc, #164]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff f894 	bl	8000cc8 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff f890 	bl	8000cc8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e03b      	b.n	8001c32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	@ (8001c3c <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1ed      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4917      	ldr	r1, [pc, #92]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf2:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490f      	ldr	r1, [pc, #60]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c06:	f000 f825 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_RCC_ClockConfig+0x264>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <HAL_RCC_ClockConfig+0x26c>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_RCC_ClockConfig+0x270>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_RCC_ClockConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f800 	bl	8000c30 <HAL_InitTick>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	04c4b400 	.word	0x04c4b400
 8001c48:	080038a0 	.word	0x080038a0
 8001c4c:	2000002c 	.word	0x2000002c
 8001c50:	20000034 	.word	0x20000034

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d102      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	e047      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c6c:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c78:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e03e      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d136      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	4a16      	ldr	r2, [pc, #88]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb2:	68d2      	ldr	r2, [r2, #12]
 8001cb4:	0a12      	lsrs	r2, r2, #8
 8001cb6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
      break;
 8001cc0:	e00c      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc2:	4a13      	ldr	r2, [pc, #76]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	68d2      	ldr	r2, [r2, #12]
 8001cce:	0a12      	lsrs	r2, r2, #8
 8001cd0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cd4:	fb02 f303 	mul.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
      break;
 8001cda:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0e5b      	lsrs	r3, r3, #25
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e001      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cfc:	693b      	ldr	r3, [r7, #16]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	371c      	adds	r7, #28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	016e3600 	.word	0x016e3600

08001d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	2000002c 	.word	0x2000002c

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d34:	f7ff fff0 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4904      	ldr	r1, [pc, #16]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	080038b0 	.word	0x080038b0

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d60:	f7ff ffda 	bl	8001d18 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0adb      	lsrs	r3, r3, #11
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4904      	ldr	r1, [pc, #16]	@ (8001d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080038b0 	.word	0x080038b0

08001d88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d10c      	bne.n	8001dc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dac:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	4a14      	ldr	r2, [pc, #80]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db6:	68d2      	ldr	r2, [r2, #12]
 8001db8:	0a12      	lsrs	r2, r2, #8
 8001dba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
    break;
 8001dc4:	e00c      	b.n	8001de0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	0a12      	lsrs	r2, r2, #8
 8001dd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    break;
 8001dde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0e5b      	lsrs	r3, r3, #25
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	016e3600 	.word	0x016e3600
 8001e10:	00f42400 	.word	0x00f42400

08001e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e042      	b.n	8001eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f83b 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2224      	movs	r2, #36	@ 0x24
 8001e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fbbc 	bl	80025dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8bd 	bl	8001fe4 <UART_SetConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e01b      	b.n	8001eac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fc3b 	bl	8002720 <UART_CheckIdleState>
 8001eaa:	4603      	mov	r3, r0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d17b      	bne.n	8001fda <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_UART_Transmit+0x26>
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e074      	b.n	8001fdc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2221      	movs	r2, #33	@ 0x21
 8001efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f02:	f7fe fee1 	bl	8000cc8 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f20:	d108      	bne.n	8001f34 <HAL_UART_Transmit+0x6c>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	e003      	b.n	8001f3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f3c:	e030      	b.n	8001fa0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	@ 0x80
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fc93 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e03d      	b.n	8001fdc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	3302      	adds	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e007      	b.n	8001f8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	781a      	ldrb	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1c8      	bne.n	8001f3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2140      	movs	r1, #64	@ 0x40
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fc5c 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e006      	b.n	8001fdc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8001fda:	2302      	movs	r3, #2
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe8:	b08c      	sub	sp, #48	@ 0x30
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4313      	orrs	r3, r2
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4baa      	ldr	r3, [pc, #680]	@ (80022bc <UART_SetConfig+0x2d8>)
 8002014:	4013      	ands	r3, r2
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800201c:	430b      	orrs	r3, r1
 800201e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a9f      	ldr	r2, [pc, #636]	@ (80022c0 <UART_SetConfig+0x2dc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800204c:	4313      	orrs	r3, r2
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800205a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206e:	f023 010f 	bic.w	r1, r3, #15
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a90      	ldr	r2, [pc, #576]	@ (80022c4 <UART_SetConfig+0x2e0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d125      	bne.n	80020d4 <UART_SetConfig+0xf0>
 8002088:	4b8f      	ldr	r3, [pc, #572]	@ (80022c8 <UART_SetConfig+0x2e4>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b03      	cmp	r3, #3
 8002094:	d81a      	bhi.n	80020cc <UART_SetConfig+0xe8>
 8002096:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <UART_SetConfig+0xb8>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020bd 	.word	0x080020bd
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020c5 	.word	0x080020c5
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020b2:	e116      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80020b4:	2302      	movs	r3, #2
 80020b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ba:	e112      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80020bc:	2304      	movs	r3, #4
 80020be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020c2:	e10e      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80020c4:	2308      	movs	r3, #8
 80020c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020ca:	e10a      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80020cc:	2310      	movs	r3, #16
 80020ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80020d2:	e106      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7c      	ldr	r2, [pc, #496]	@ (80022cc <UART_SetConfig+0x2e8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d138      	bne.n	8002150 <UART_SetConfig+0x16c>
 80020de:	4b7a      	ldr	r3, [pc, #488]	@ (80022c8 <UART_SetConfig+0x2e4>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d82d      	bhi.n	8002148 <UART_SetConfig+0x164>
 80020ec:	a201      	add	r2, pc, #4	@ (adr r2, 80020f4 <UART_SetConfig+0x110>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002129 	.word	0x08002129
 80020f8:	08002149 	.word	0x08002149
 80020fc:	08002149 	.word	0x08002149
 8002100:	08002149 	.word	0x08002149
 8002104:	08002139 	.word	0x08002139
 8002108:	08002149 	.word	0x08002149
 800210c:	08002149 	.word	0x08002149
 8002110:	08002149 	.word	0x08002149
 8002114:	08002131 	.word	0x08002131
 8002118:	08002149 	.word	0x08002149
 800211c:	08002149 	.word	0x08002149
 8002120:	08002149 	.word	0x08002149
 8002124:	08002141 	.word	0x08002141
 8002128:	2300      	movs	r3, #0
 800212a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800212e:	e0d8      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002130:	2302      	movs	r3, #2
 8002132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002136:	e0d4      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002138:	2304      	movs	r3, #4
 800213a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800213e:	e0d0      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002140:	2308      	movs	r3, #8
 8002142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002146:	e0cc      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002148:	2310      	movs	r3, #16
 800214a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800214e:	e0c8      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5e      	ldr	r2, [pc, #376]	@ (80022d0 <UART_SetConfig+0x2ec>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d125      	bne.n	80021a6 <UART_SetConfig+0x1c2>
 800215a:	4b5b      	ldr	r3, [pc, #364]	@ (80022c8 <UART_SetConfig+0x2e4>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002164:	2b30      	cmp	r3, #48	@ 0x30
 8002166:	d016      	beq.n	8002196 <UART_SetConfig+0x1b2>
 8002168:	2b30      	cmp	r3, #48	@ 0x30
 800216a:	d818      	bhi.n	800219e <UART_SetConfig+0x1ba>
 800216c:	2b20      	cmp	r3, #32
 800216e:	d00a      	beq.n	8002186 <UART_SetConfig+0x1a2>
 8002170:	2b20      	cmp	r3, #32
 8002172:	d814      	bhi.n	800219e <UART_SetConfig+0x1ba>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <UART_SetConfig+0x19a>
 8002178:	2b10      	cmp	r3, #16
 800217a:	d008      	beq.n	800218e <UART_SetConfig+0x1aa>
 800217c:	e00f      	b.n	800219e <UART_SetConfig+0x1ba>
 800217e:	2300      	movs	r3, #0
 8002180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002184:	e0ad      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002186:	2302      	movs	r3, #2
 8002188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800218c:	e0a9      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800218e:	2304      	movs	r3, #4
 8002190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002194:	e0a5      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002196:	2308      	movs	r3, #8
 8002198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800219c:	e0a1      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800219e:	2310      	movs	r3, #16
 80021a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021a4:	e09d      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a4a      	ldr	r2, [pc, #296]	@ (80022d4 <UART_SetConfig+0x2f0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d125      	bne.n	80021fc <UART_SetConfig+0x218>
 80021b0:	4b45      	ldr	r3, [pc, #276]	@ (80022c8 <UART_SetConfig+0x2e4>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80021ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80021bc:	d016      	beq.n	80021ec <UART_SetConfig+0x208>
 80021be:	2bc0      	cmp	r3, #192	@ 0xc0
 80021c0:	d818      	bhi.n	80021f4 <UART_SetConfig+0x210>
 80021c2:	2b80      	cmp	r3, #128	@ 0x80
 80021c4:	d00a      	beq.n	80021dc <UART_SetConfig+0x1f8>
 80021c6:	2b80      	cmp	r3, #128	@ 0x80
 80021c8:	d814      	bhi.n	80021f4 <UART_SetConfig+0x210>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <UART_SetConfig+0x1f0>
 80021ce:	2b40      	cmp	r3, #64	@ 0x40
 80021d0:	d008      	beq.n	80021e4 <UART_SetConfig+0x200>
 80021d2:	e00f      	b.n	80021f4 <UART_SetConfig+0x210>
 80021d4:	2300      	movs	r3, #0
 80021d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021da:	e082      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021dc:	2302      	movs	r3, #2
 80021de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021e2:	e07e      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021e4:	2304      	movs	r3, #4
 80021e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021ea:	e07a      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021ec:	2308      	movs	r3, #8
 80021ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021f2:	e076      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021f4:	2310      	movs	r3, #16
 80021f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80021fa:	e072      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a35      	ldr	r2, [pc, #212]	@ (80022d8 <UART_SetConfig+0x2f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12a      	bne.n	800225c <UART_SetConfig+0x278>
 8002206:	4b30      	ldr	r3, [pc, #192]	@ (80022c8 <UART_SetConfig+0x2e4>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002214:	d01a      	beq.n	800224c <UART_SetConfig+0x268>
 8002216:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800221a:	d81b      	bhi.n	8002254 <UART_SetConfig+0x270>
 800221c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002220:	d00c      	beq.n	800223c <UART_SetConfig+0x258>
 8002222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002226:	d815      	bhi.n	8002254 <UART_SetConfig+0x270>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <UART_SetConfig+0x250>
 800222c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002230:	d008      	beq.n	8002244 <UART_SetConfig+0x260>
 8002232:	e00f      	b.n	8002254 <UART_SetConfig+0x270>
 8002234:	2300      	movs	r3, #0
 8002236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800223a:	e052      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800223c:	2302      	movs	r3, #2
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002242:	e04e      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002244:	2304      	movs	r3, #4
 8002246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800224a:	e04a      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800224c:	2308      	movs	r3, #8
 800224e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002252:	e046      	b.n	80022e2 <UART_SetConfig+0x2fe>
 8002254:	2310      	movs	r3, #16
 8002256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800225a:	e042      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <UART_SetConfig+0x2dc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d13a      	bne.n	80022dc <UART_SetConfig+0x2f8>
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <UART_SetConfig+0x2e4>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002274:	d01a      	beq.n	80022ac <UART_SetConfig+0x2c8>
 8002276:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800227a:	d81b      	bhi.n	80022b4 <UART_SetConfig+0x2d0>
 800227c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002280:	d00c      	beq.n	800229c <UART_SetConfig+0x2b8>
 8002282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002286:	d815      	bhi.n	80022b4 <UART_SetConfig+0x2d0>
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <UART_SetConfig+0x2b0>
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002290:	d008      	beq.n	80022a4 <UART_SetConfig+0x2c0>
 8002292:	e00f      	b.n	80022b4 <UART_SetConfig+0x2d0>
 8002294:	2300      	movs	r3, #0
 8002296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800229a:	e022      	b.n	80022e2 <UART_SetConfig+0x2fe>
 800229c:	2302      	movs	r3, #2
 800229e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022a2:	e01e      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80022a4:	2304      	movs	r3, #4
 80022a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022aa:	e01a      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80022ac:	2308      	movs	r3, #8
 80022ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022b2:	e016      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80022b4:	2310      	movs	r3, #16
 80022b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022ba:	e012      	b.n	80022e2 <UART_SetConfig+0x2fe>
 80022bc:	cfff69f3 	.word	0xcfff69f3
 80022c0:	40008000 	.word	0x40008000
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40004800 	.word	0x40004800
 80022d4:	40004c00 	.word	0x40004c00
 80022d8:	40005000 	.word	0x40005000
 80022dc:	2310      	movs	r3, #16
 80022de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4aae      	ldr	r2, [pc, #696]	@ (80025a0 <UART_SetConfig+0x5bc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	f040 8097 	bne.w	800241c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d823      	bhi.n	800233e <UART_SetConfig+0x35a>
 80022f6:	a201      	add	r2, pc, #4	@ (adr r2, 80022fc <UART_SetConfig+0x318>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	08002321 	.word	0x08002321
 8002300:	0800233f 	.word	0x0800233f
 8002304:	08002329 	.word	0x08002329
 8002308:	0800233f 	.word	0x0800233f
 800230c:	0800232f 	.word	0x0800232f
 8002310:	0800233f 	.word	0x0800233f
 8002314:	0800233f 	.word	0x0800233f
 8002318:	0800233f 	.word	0x0800233f
 800231c:	08002337 	.word	0x08002337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002320:	f7ff fd06 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002326:	e010      	b.n	800234a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002328:	4b9e      	ldr	r3, [pc, #632]	@ (80025a4 <UART_SetConfig+0x5c0>)
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800232c:	e00d      	b.n	800234a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800232e:	f7ff fc91 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002332:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002334:	e009      	b.n	800234a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800233c:	e005      	b.n	800234a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002348:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8130 	beq.w	80025b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	4a94      	ldr	r2, [pc, #592]	@ (80025a8 <UART_SetConfig+0x5c4>)
 8002358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800235c:	461a      	mov	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	fbb3 f3f2 	udiv	r3, r3, r2
 8002364:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	429a      	cmp	r2, r3
 8002374:	d305      	bcc.n	8002382 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	429a      	cmp	r2, r3
 8002380:	d903      	bls.n	800238a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002388:	e113      	b.n	80025b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	2200      	movs	r2, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	60fa      	str	r2, [r7, #12]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	4a84      	ldr	r2, [pc, #528]	@ (80025a8 <UART_SetConfig+0x5c4>)
 8002398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800239c:	b29b      	uxth	r3, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ac:	f7fd ff88 	bl	80002c0 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	020b      	lsls	r3, r1, #8
 80023c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80023c6:	0202      	lsls	r2, r0, #8
 80023c8:	6979      	ldr	r1, [r7, #20]
 80023ca:	6849      	ldr	r1, [r1, #4]
 80023cc:	0849      	lsrs	r1, r1, #1
 80023ce:	2000      	movs	r0, #0
 80023d0:	460c      	mov	r4, r1
 80023d2:	4605      	mov	r5, r0
 80023d4:	eb12 0804 	adds.w	r8, r2, r4
 80023d8:	eb43 0905 	adc.w	r9, r3, r5
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	469a      	mov	sl, r3
 80023e4:	4693      	mov	fp, r2
 80023e6:	4652      	mov	r2, sl
 80023e8:	465b      	mov	r3, fp
 80023ea:	4640      	mov	r0, r8
 80023ec:	4649      	mov	r1, r9
 80023ee:	f7fd ff67 	bl	80002c0 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4613      	mov	r3, r2
 80023f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002400:	d308      	bcc.n	8002414 <UART_SetConfig+0x430>
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002408:	d204      	bcs.n	8002414 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a3a      	ldr	r2, [r7, #32]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	e0ce      	b.n	80025b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800241a:	e0ca      	b.n	80025b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002424:	d166      	bne.n	80024f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002426:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800242a:	2b08      	cmp	r3, #8
 800242c:	d827      	bhi.n	800247e <UART_SetConfig+0x49a>
 800242e:	a201      	add	r2, pc, #4	@ (adr r2, 8002434 <UART_SetConfig+0x450>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002459 	.word	0x08002459
 8002438:	08002461 	.word	0x08002461
 800243c:	08002469 	.word	0x08002469
 8002440:	0800247f 	.word	0x0800247f
 8002444:	0800246f 	.word	0x0800246f
 8002448:	0800247f 	.word	0x0800247f
 800244c:	0800247f 	.word	0x0800247f
 8002450:	0800247f 	.word	0x0800247f
 8002454:	08002477 	.word	0x08002477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002458:	f7ff fc6a 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800245c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800245e:	e014      	b.n	800248a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002460:	f7ff fc7c 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8002464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002466:	e010      	b.n	800248a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002468:	4b4e      	ldr	r3, [pc, #312]	@ (80025a4 <UART_SetConfig+0x5c0>)
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800246c:	e00d      	b.n	800248a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800246e:	f7ff fbf1 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002474:	e009      	b.n	800248a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800247c:	e005      	b.n	800248a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8090 	beq.w	80025b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	4a44      	ldr	r2, [pc, #272]	@ (80025a8 <UART_SetConfig+0x5c4>)
 8002498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800249c:	461a      	mov	r2, r3
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	441a      	add	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2b0f      	cmp	r3, #15
 80024bc:	d916      	bls.n	80024ec <UART_SetConfig+0x508>
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c4:	d212      	bcs.n	80024ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f023 030f 	bic.w	r3, r3, #15
 80024ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	b29a      	uxth	r2, r3
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	4313      	orrs	r3, r2
 80024e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	8bfa      	ldrh	r2, [r7, #30]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	e062      	b.n	80025b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80024f2:	e05e      	b.n	80025b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d828      	bhi.n	800254e <UART_SetConfig+0x56a>
 80024fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002504 <UART_SetConfig+0x520>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	08002529 	.word	0x08002529
 8002508:	08002531 	.word	0x08002531
 800250c:	08002539 	.word	0x08002539
 8002510:	0800254f 	.word	0x0800254f
 8002514:	0800253f 	.word	0x0800253f
 8002518:	0800254f 	.word	0x0800254f
 800251c:	0800254f 	.word	0x0800254f
 8002520:	0800254f 	.word	0x0800254f
 8002524:	08002547 	.word	0x08002547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002528:	f7ff fc02 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 800252c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800252e:	e014      	b.n	800255a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002530:	f7ff fc14 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8002534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002536:	e010      	b.n	800255a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <UART_SetConfig+0x5c0>)
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800253c:	e00d      	b.n	800255a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800253e:	f7ff fb89 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8002542:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002544:	e009      	b.n	800255a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002546:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800254c:	e005      	b.n	800255a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002558:	bf00      	nop
    }

    if (pclk != 0U)
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d028      	beq.n	80025b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <UART_SetConfig+0x5c4>)
 8002566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800256a:	461a      	mov	r2, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	441a      	add	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	2b0f      	cmp	r3, #15
 8002588:	d910      	bls.n	80025ac <UART_SetConfig+0x5c8>
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002590:	d20c      	bcs.n	80025ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	b29a      	uxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	e009      	b.n	80025b2 <UART_SetConfig+0x5ce>
 800259e:	bf00      	nop
 80025a0:	40008000 	.word	0x40008000
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	080038b8 	.word	0x080038b8
      }
      else
      {
        ret = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2201      	movs	r2, #1
 80025be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2200      	movs	r2, #0
 80025c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2200      	movs	r2, #0
 80025cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80025ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3730      	adds	r7, #48	@ 0x30
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01a      	beq.n	80026f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026da:	d10a      	bne.n	80026f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b098      	sub	sp, #96	@ 0x60
 8002724:	af02      	add	r7, sp, #8
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002730:	f7fe faca 	bl	8000cc8 <HAL_GetTick>
 8002734:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b08      	cmp	r3, #8
 8002742:	d12f      	bne.n	80027a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f88e 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d022      	beq.n	80027a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800276c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002772:	653b      	str	r3, [r7, #80]	@ 0x50
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800277c:	647b      	str	r3, [r7, #68]	@ 0x44
 800277e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800278a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e6      	bne.n	800275e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e063      	b.n	800286c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d149      	bne.n	8002846 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ba:	2200      	movs	r2, #0
 80027bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f857 	bl	8002874 <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d03c      	beq.n	8002846 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	623b      	str	r3, [r7, #32]
   return(result);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1e6      	bne.n	80027cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3308      	adds	r3, #8
 8002804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	60fb      	str	r3, [r7, #12]
   return(result);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3308      	adds	r3, #8
 800281c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800281e:	61fa      	str	r2, [r7, #28]
 8002820:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	617b      	str	r3, [r7, #20]
   return(result);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e5      	bne.n	80027fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e012      	b.n	800286c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3758      	adds	r7, #88	@ 0x58
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	4613      	mov	r3, r2
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	e04f      	b.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d04b      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe fa1b 	bl	8000cc8 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e04e      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d037      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b80      	cmp	r3, #128	@ 0x80
 80028ba:	d034      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d031      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d110      	bne.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2208      	movs	r2, #8
 80028d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f838 	bl	800294e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2208      	movs	r2, #8
 80028e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e029      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002900:	d111      	bne.n	8002926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800290a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f81e 	bl	800294e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e00f      	b.n	8002946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4013      	ands	r3, r2
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	429a      	cmp	r2, r3
 8002942:	d0a0      	beq.n	8002886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800294e:	b480      	push	{r7}
 8002950:	b095      	sub	sp, #84	@ 0x54
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800296a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002974:	643b      	str	r3, [r7, #64]	@ 0x40
 8002976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800297a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e6      	bne.n	8002956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3308      	adds	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	61fb      	str	r3, [r7, #28]
   return(result);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3308      	adds	r3, #8
 80029aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e3      	bne.n	8002988 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d118      	bne.n	80029fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f023 0310 	bic.w	r3, r3, #16
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	613b      	str	r3, [r7, #16]
   return(result);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e6      	bne.n	80029c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002a0e:	bf00      	nop
 8002a10:	3754      	adds	r7, #84	@ 0x54
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <std>:
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	b510      	push	{r4, lr}
 8002a20:	4604      	mov	r4, r0
 8002a22:	e9c0 3300 	strd	r3, r3, [r0]
 8002a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a2a:	6083      	str	r3, [r0, #8]
 8002a2c:	8181      	strh	r1, [r0, #12]
 8002a2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a30:	81c2      	strh	r2, [r0, #14]
 8002a32:	6183      	str	r3, [r0, #24]
 8002a34:	4619      	mov	r1, r3
 8002a36:	2208      	movs	r2, #8
 8002a38:	305c      	adds	r0, #92	@ 0x5c
 8002a3a:	f000 f906 	bl	8002c4a <memset>
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <std+0x58>)
 8002a40:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <std+0x5c>)
 8002a44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a46:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <std+0x60>)
 8002a48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <std+0x64>)
 8002a4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <std+0x68>)
 8002a50:	6224      	str	r4, [r4, #32]
 8002a52:	429c      	cmp	r4, r3
 8002a54:	d006      	beq.n	8002a64 <std+0x48>
 8002a56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a5a:	4294      	cmp	r4, r2
 8002a5c:	d002      	beq.n	8002a64 <std+0x48>
 8002a5e:	33d0      	adds	r3, #208	@ 0xd0
 8002a60:	429c      	cmp	r4, r3
 8002a62:	d105      	bne.n	8002a70 <std+0x54>
 8002a64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6c:	f000 b966 	b.w	8002d3c <__retarget_lock_init_recursive>
 8002a70:	bd10      	pop	{r4, pc}
 8002a72:	bf00      	nop
 8002a74:	08002bc5 	.word	0x08002bc5
 8002a78:	08002be7 	.word	0x08002be7
 8002a7c:	08002c1f 	.word	0x08002c1f
 8002a80:	08002c43 	.word	0x08002c43
 8002a84:	20000164 	.word	0x20000164

08002a88 <stdio_exit_handler>:
 8002a88:	4a02      	ldr	r2, [pc, #8]	@ (8002a94 <stdio_exit_handler+0xc>)
 8002a8a:	4903      	ldr	r1, [pc, #12]	@ (8002a98 <stdio_exit_handler+0x10>)
 8002a8c:	4803      	ldr	r0, [pc, #12]	@ (8002a9c <stdio_exit_handler+0x14>)
 8002a8e:	f000 b869 	b.w	8002b64 <_fwalk_sglue>
 8002a92:	bf00      	nop
 8002a94:	2000003c 	.word	0x2000003c
 8002a98:	080035dd 	.word	0x080035dd
 8002a9c:	2000004c 	.word	0x2000004c

08002aa0 <cleanup_stdio>:
 8002aa0:	6841      	ldr	r1, [r0, #4]
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <cleanup_stdio+0x34>)
 8002aa4:	4299      	cmp	r1, r3
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	d001      	beq.n	8002ab0 <cleanup_stdio+0x10>
 8002aac:	f000 fd96 	bl	80035dc <_fflush_r>
 8002ab0:	68a1      	ldr	r1, [r4, #8]
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <cleanup_stdio+0x38>)
 8002ab4:	4299      	cmp	r1, r3
 8002ab6:	d002      	beq.n	8002abe <cleanup_stdio+0x1e>
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f000 fd8f 	bl	80035dc <_fflush_r>
 8002abe:	68e1      	ldr	r1, [r4, #12]
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <cleanup_stdio+0x3c>)
 8002ac2:	4299      	cmp	r1, r3
 8002ac4:	d004      	beq.n	8002ad0 <cleanup_stdio+0x30>
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002acc:	f000 bd86 	b.w	80035dc <_fflush_r>
 8002ad0:	bd10      	pop	{r4, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000164 	.word	0x20000164
 8002ad8:	200001cc 	.word	0x200001cc
 8002adc:	20000234 	.word	0x20000234

08002ae0 <global_stdio_init.part.0>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <global_stdio_init.part.0+0x30>)
 8002ae4:	4c0b      	ldr	r4, [pc, #44]	@ (8002b14 <global_stdio_init.part.0+0x34>)
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <global_stdio_init.part.0+0x38>)
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4620      	mov	r0, r4
 8002aec:	2200      	movs	r2, #0
 8002aee:	2104      	movs	r1, #4
 8002af0:	f7ff ff94 	bl	8002a1c <std>
 8002af4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002af8:	2201      	movs	r2, #1
 8002afa:	2109      	movs	r1, #9
 8002afc:	f7ff ff8e 	bl	8002a1c <std>
 8002b00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b04:	2202      	movs	r2, #2
 8002b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0a:	2112      	movs	r1, #18
 8002b0c:	f7ff bf86 	b.w	8002a1c <std>
 8002b10:	2000029c 	.word	0x2000029c
 8002b14:	20000164 	.word	0x20000164
 8002b18:	08002a89 	.word	0x08002a89

08002b1c <__sfp_lock_acquire>:
 8002b1c:	4801      	ldr	r0, [pc, #4]	@ (8002b24 <__sfp_lock_acquire+0x8>)
 8002b1e:	f000 b90e 	b.w	8002d3e <__retarget_lock_acquire_recursive>
 8002b22:	bf00      	nop
 8002b24:	200002a5 	.word	0x200002a5

08002b28 <__sfp_lock_release>:
 8002b28:	4801      	ldr	r0, [pc, #4]	@ (8002b30 <__sfp_lock_release+0x8>)
 8002b2a:	f000 b909 	b.w	8002d40 <__retarget_lock_release_recursive>
 8002b2e:	bf00      	nop
 8002b30:	200002a5 	.word	0x200002a5

08002b34 <__sinit>:
 8002b34:	b510      	push	{r4, lr}
 8002b36:	4604      	mov	r4, r0
 8002b38:	f7ff fff0 	bl	8002b1c <__sfp_lock_acquire>
 8002b3c:	6a23      	ldr	r3, [r4, #32]
 8002b3e:	b11b      	cbz	r3, 8002b48 <__sinit+0x14>
 8002b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b44:	f7ff bff0 	b.w	8002b28 <__sfp_lock_release>
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <__sinit+0x28>)
 8002b4a:	6223      	str	r3, [r4, #32]
 8002b4c:	4b04      	ldr	r3, [pc, #16]	@ (8002b60 <__sinit+0x2c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f5      	bne.n	8002b40 <__sinit+0xc>
 8002b54:	f7ff ffc4 	bl	8002ae0 <global_stdio_init.part.0>
 8002b58:	e7f2      	b.n	8002b40 <__sinit+0xc>
 8002b5a:	bf00      	nop
 8002b5c:	08002aa1 	.word	0x08002aa1
 8002b60:	2000029c 	.word	0x2000029c

08002b64 <_fwalk_sglue>:
 8002b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b68:	4607      	mov	r7, r0
 8002b6a:	4688      	mov	r8, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	2600      	movs	r6, #0
 8002b70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b74:	f1b9 0901 	subs.w	r9, r9, #1
 8002b78:	d505      	bpl.n	8002b86 <_fwalk_sglue+0x22>
 8002b7a:	6824      	ldr	r4, [r4, #0]
 8002b7c:	2c00      	cmp	r4, #0
 8002b7e:	d1f7      	bne.n	8002b70 <_fwalk_sglue+0xc>
 8002b80:	4630      	mov	r0, r6
 8002b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b86:	89ab      	ldrh	r3, [r5, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d907      	bls.n	8002b9c <_fwalk_sglue+0x38>
 8002b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b90:	3301      	adds	r3, #1
 8002b92:	d003      	beq.n	8002b9c <_fwalk_sglue+0x38>
 8002b94:	4629      	mov	r1, r5
 8002b96:	4638      	mov	r0, r7
 8002b98:	47c0      	blx	r8
 8002b9a:	4306      	orrs	r6, r0
 8002b9c:	3568      	adds	r5, #104	@ 0x68
 8002b9e:	e7e9      	b.n	8002b74 <_fwalk_sglue+0x10>

08002ba0 <iprintf>:
 8002ba0:	b40f      	push	{r0, r1, r2, r3}
 8002ba2:	b507      	push	{r0, r1, r2, lr}
 8002ba4:	4906      	ldr	r1, [pc, #24]	@ (8002bc0 <iprintf+0x20>)
 8002ba6:	ab04      	add	r3, sp, #16
 8002ba8:	6808      	ldr	r0, [r1, #0]
 8002baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bae:	6881      	ldr	r1, [r0, #8]
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	f000 f9e9 	bl	8002f88 <_vfiprintf_r>
 8002bb6:	b003      	add	sp, #12
 8002bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bbc:	b004      	add	sp, #16
 8002bbe:	4770      	bx	lr
 8002bc0:	20000048 	.word	0x20000048

08002bc4 <__sread>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bcc:	f000 f868 	bl	8002ca0 <_read_r>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	bfab      	itete	ge
 8002bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bd8:	181b      	addge	r3, r3, r0
 8002bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bde:	bfac      	ite	ge
 8002be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002be2:	81a3      	strhlt	r3, [r4, #12]
 8002be4:	bd10      	pop	{r4, pc}

08002be6 <__swrite>:
 8002be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bea:	461f      	mov	r7, r3
 8002bec:	898b      	ldrh	r3, [r1, #12]
 8002bee:	05db      	lsls	r3, r3, #23
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	460c      	mov	r4, r1
 8002bf4:	4616      	mov	r6, r2
 8002bf6:	d505      	bpl.n	8002c04 <__swrite+0x1e>
 8002bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f000 f83c 	bl	8002c7c <_lseek_r>
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	4632      	mov	r2, r6
 8002c12:	463b      	mov	r3, r7
 8002c14:	4628      	mov	r0, r5
 8002c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1a:	f000 b853 	b.w	8002cc4 <_write_r>

08002c1e <__sseek>:
 8002c1e:	b510      	push	{r4, lr}
 8002c20:	460c      	mov	r4, r1
 8002c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c26:	f000 f829 	bl	8002c7c <_lseek_r>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	89a3      	ldrh	r3, [r4, #12]
 8002c2e:	bf15      	itete	ne
 8002c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c3a:	81a3      	strheq	r3, [r4, #12]
 8002c3c:	bf18      	it	ne
 8002c3e:	81a3      	strhne	r3, [r4, #12]
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <__sclose>:
 8002c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c46:	f000 b809 	b.w	8002c5c <_close_r>

08002c4a <memset>:
 8002c4a:	4402      	add	r2, r0
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d100      	bne.n	8002c54 <memset+0xa>
 8002c52:	4770      	bx	lr
 8002c54:	f803 1b01 	strb.w	r1, [r3], #1
 8002c58:	e7f9      	b.n	8002c4e <memset+0x4>
	...

08002c5c <_close_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4d06      	ldr	r5, [pc, #24]	@ (8002c78 <_close_r+0x1c>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	4604      	mov	r4, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fd fe5a 	bl	8000920 <_close>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d102      	bne.n	8002c76 <_close_r+0x1a>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	b103      	cbz	r3, 8002c76 <_close_r+0x1a>
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	200002a0 	.word	0x200002a0

08002c7c <_lseek_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4d07      	ldr	r5, [pc, #28]	@ (8002c9c <_lseek_r+0x20>)
 8002c80:	4604      	mov	r4, r0
 8002c82:	4608      	mov	r0, r1
 8002c84:	4611      	mov	r1, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	602a      	str	r2, [r5, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f7fd fe6f 	bl	800096e <_lseek>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d102      	bne.n	8002c9a <_lseek_r+0x1e>
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	b103      	cbz	r3, 8002c9a <_lseek_r+0x1e>
 8002c98:	6023      	str	r3, [r4, #0]
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	200002a0 	.word	0x200002a0

08002ca0 <_read_r>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	4d07      	ldr	r5, [pc, #28]	@ (8002cc0 <_read_r+0x20>)
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	4611      	mov	r1, r2
 8002caa:	2200      	movs	r2, #0
 8002cac:	602a      	str	r2, [r5, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f7fd fdfd 	bl	80008ae <_read>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_read_r+0x1e>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_read_r+0x1e>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	200002a0 	.word	0x200002a0

08002cc4 <_write_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	@ (8002ce4 <_write_r+0x20>)
 8002cc8:	4604      	mov	r4, r0
 8002cca:	4608      	mov	r0, r1
 8002ccc:	4611      	mov	r1, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7fd fe08 	bl	80008e8 <_write>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_write_r+0x1e>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_write_r+0x1e>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	200002a0 	.word	0x200002a0

08002ce8 <__errno>:
 8002ce8:	4b01      	ldr	r3, [pc, #4]	@ (8002cf0 <__errno+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000048 	.word	0x20000048

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8002d2c <__libc_init_array+0x38>)
 8002cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8002d30 <__libc_init_array+0x3c>)
 8002cfa:	1b64      	subs	r4, r4, r5
 8002cfc:	10a4      	asrs	r4, r4, #2
 8002cfe:	2600      	movs	r6, #0
 8002d00:	42a6      	cmp	r6, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	4d0b      	ldr	r5, [pc, #44]	@ (8002d34 <__libc_init_array+0x40>)
 8002d06:	4c0c      	ldr	r4, [pc, #48]	@ (8002d38 <__libc_init_array+0x44>)
 8002d08:	f000 fdb8 	bl	800387c <_init>
 8002d0c:	1b64      	subs	r4, r4, r5
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	2600      	movs	r6, #0
 8002d12:	42a6      	cmp	r6, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1c:	4798      	blx	r3
 8002d1e:	3601      	adds	r6, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d26:	4798      	blx	r3
 8002d28:	3601      	adds	r6, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	0800390c 	.word	0x0800390c
 8002d30:	0800390c 	.word	0x0800390c
 8002d34:	0800390c 	.word	0x0800390c
 8002d38:	08003910 	.word	0x08003910

08002d3c <__retarget_lock_init_recursive>:
 8002d3c:	4770      	bx	lr

08002d3e <__retarget_lock_acquire_recursive>:
 8002d3e:	4770      	bx	lr

08002d40 <__retarget_lock_release_recursive>:
 8002d40:	4770      	bx	lr
	...

08002d44 <_free_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4605      	mov	r5, r0
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	d041      	beq.n	8002dd0 <_free_r+0x8c>
 8002d4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d50:	1f0c      	subs	r4, r1, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bfb8      	it	lt
 8002d56:	18e4      	addlt	r4, r4, r3
 8002d58:	f000 f8e0 	bl	8002f1c <__malloc_lock>
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <_free_r+0x90>)
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	b933      	cbnz	r3, 8002d70 <_free_r+0x2c>
 8002d62:	6063      	str	r3, [r4, #4]
 8002d64:	6014      	str	r4, [r2, #0]
 8002d66:	4628      	mov	r0, r5
 8002d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d6c:	f000 b8dc 	b.w	8002f28 <__malloc_unlock>
 8002d70:	42a3      	cmp	r3, r4
 8002d72:	d908      	bls.n	8002d86 <_free_r+0x42>
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	1821      	adds	r1, r4, r0
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	bf01      	itttt	eq
 8002d7c:	6819      	ldreq	r1, [r3, #0]
 8002d7e:	685b      	ldreq	r3, [r3, #4]
 8002d80:	1809      	addeq	r1, r1, r0
 8002d82:	6021      	streq	r1, [r4, #0]
 8002d84:	e7ed      	b.n	8002d62 <_free_r+0x1e>
 8002d86:	461a      	mov	r2, r3
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	b10b      	cbz	r3, 8002d90 <_free_r+0x4c>
 8002d8c:	42a3      	cmp	r3, r4
 8002d8e:	d9fa      	bls.n	8002d86 <_free_r+0x42>
 8002d90:	6811      	ldr	r1, [r2, #0]
 8002d92:	1850      	adds	r0, r2, r1
 8002d94:	42a0      	cmp	r0, r4
 8002d96:	d10b      	bne.n	8002db0 <_free_r+0x6c>
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	4401      	add	r1, r0
 8002d9c:	1850      	adds	r0, r2, r1
 8002d9e:	4283      	cmp	r3, r0
 8002da0:	6011      	str	r1, [r2, #0]
 8002da2:	d1e0      	bne.n	8002d66 <_free_r+0x22>
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	6053      	str	r3, [r2, #4]
 8002daa:	4408      	add	r0, r1
 8002dac:	6010      	str	r0, [r2, #0]
 8002dae:	e7da      	b.n	8002d66 <_free_r+0x22>
 8002db0:	d902      	bls.n	8002db8 <_free_r+0x74>
 8002db2:	230c      	movs	r3, #12
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	e7d6      	b.n	8002d66 <_free_r+0x22>
 8002db8:	6820      	ldr	r0, [r4, #0]
 8002dba:	1821      	adds	r1, r4, r0
 8002dbc:	428b      	cmp	r3, r1
 8002dbe:	bf04      	itt	eq
 8002dc0:	6819      	ldreq	r1, [r3, #0]
 8002dc2:	685b      	ldreq	r3, [r3, #4]
 8002dc4:	6063      	str	r3, [r4, #4]
 8002dc6:	bf04      	itt	eq
 8002dc8:	1809      	addeq	r1, r1, r0
 8002dca:	6021      	streq	r1, [r4, #0]
 8002dcc:	6054      	str	r4, [r2, #4]
 8002dce:	e7ca      	b.n	8002d66 <_free_r+0x22>
 8002dd0:	bd38      	pop	{r3, r4, r5, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200002ac 	.word	0x200002ac

08002dd8 <sbrk_aligned>:
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4e0f      	ldr	r6, [pc, #60]	@ (8002e18 <sbrk_aligned+0x40>)
 8002ddc:	460c      	mov	r4, r1
 8002dde:	6831      	ldr	r1, [r6, #0]
 8002de0:	4605      	mov	r5, r0
 8002de2:	b911      	cbnz	r1, 8002dea <sbrk_aligned+0x12>
 8002de4:	f000 fcb6 	bl	8003754 <_sbrk_r>
 8002de8:	6030      	str	r0, [r6, #0]
 8002dea:	4621      	mov	r1, r4
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 fcb1 	bl	8003754 <_sbrk_r>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d103      	bne.n	8002dfe <sbrk_aligned+0x26>
 8002df6:	f04f 34ff 	mov.w	r4, #4294967295
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	1cc4      	adds	r4, r0, #3
 8002e00:	f024 0403 	bic.w	r4, r4, #3
 8002e04:	42a0      	cmp	r0, r4
 8002e06:	d0f8      	beq.n	8002dfa <sbrk_aligned+0x22>
 8002e08:	1a21      	subs	r1, r4, r0
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 fca2 	bl	8003754 <_sbrk_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d1f2      	bne.n	8002dfa <sbrk_aligned+0x22>
 8002e14:	e7ef      	b.n	8002df6 <sbrk_aligned+0x1e>
 8002e16:	bf00      	nop
 8002e18:	200002a8 	.word	0x200002a8

08002e1c <_malloc_r>:
 8002e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e20:	1ccd      	adds	r5, r1, #3
 8002e22:	f025 0503 	bic.w	r5, r5, #3
 8002e26:	3508      	adds	r5, #8
 8002e28:	2d0c      	cmp	r5, #12
 8002e2a:	bf38      	it	cc
 8002e2c:	250c      	movcc	r5, #12
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	4606      	mov	r6, r0
 8002e32:	db01      	blt.n	8002e38 <_malloc_r+0x1c>
 8002e34:	42a9      	cmp	r1, r5
 8002e36:	d904      	bls.n	8002e42 <_malloc_r+0x26>
 8002e38:	230c      	movs	r3, #12
 8002e3a:	6033      	str	r3, [r6, #0]
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f18 <_malloc_r+0xfc>
 8002e46:	f000 f869 	bl	8002f1c <__malloc_lock>
 8002e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e4e:	461c      	mov	r4, r3
 8002e50:	bb44      	cbnz	r4, 8002ea4 <_malloc_r+0x88>
 8002e52:	4629      	mov	r1, r5
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7ff ffbf 	bl	8002dd8 <sbrk_aligned>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	d158      	bne.n	8002f12 <_malloc_r+0xf6>
 8002e60:	f8d8 4000 	ldr.w	r4, [r8]
 8002e64:	4627      	mov	r7, r4
 8002e66:	2f00      	cmp	r7, #0
 8002e68:	d143      	bne.n	8002ef2 <_malloc_r+0xd6>
 8002e6a:	2c00      	cmp	r4, #0
 8002e6c:	d04b      	beq.n	8002f06 <_malloc_r+0xea>
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	4639      	mov	r1, r7
 8002e72:	4630      	mov	r0, r6
 8002e74:	eb04 0903 	add.w	r9, r4, r3
 8002e78:	f000 fc6c 	bl	8003754 <_sbrk_r>
 8002e7c:	4581      	cmp	r9, r0
 8002e7e:	d142      	bne.n	8002f06 <_malloc_r+0xea>
 8002e80:	6821      	ldr	r1, [r4, #0]
 8002e82:	1a6d      	subs	r5, r5, r1
 8002e84:	4629      	mov	r1, r5
 8002e86:	4630      	mov	r0, r6
 8002e88:	f7ff ffa6 	bl	8002dd8 <sbrk_aligned>
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d03a      	beq.n	8002f06 <_malloc_r+0xea>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	442b      	add	r3, r5
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	f8d8 3000 	ldr.w	r3, [r8]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	bb62      	cbnz	r2, 8002ef8 <_malloc_r+0xdc>
 8002e9e:	f8c8 7000 	str.w	r7, [r8]
 8002ea2:	e00f      	b.n	8002ec4 <_malloc_r+0xa8>
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	1b52      	subs	r2, r2, r5
 8002ea8:	d420      	bmi.n	8002eec <_malloc_r+0xd0>
 8002eaa:	2a0b      	cmp	r2, #11
 8002eac:	d917      	bls.n	8002ede <_malloc_r+0xc2>
 8002eae:	1961      	adds	r1, r4, r5
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	6025      	str	r5, [r4, #0]
 8002eb4:	bf18      	it	ne
 8002eb6:	6059      	strne	r1, [r3, #4]
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	bf08      	it	eq
 8002ebc:	f8c8 1000 	streq.w	r1, [r8]
 8002ec0:	5162      	str	r2, [r4, r5]
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 f82f 	bl	8002f28 <__malloc_unlock>
 8002eca:	f104 000b 	add.w	r0, r4, #11
 8002ece:	1d23      	adds	r3, r4, #4
 8002ed0:	f020 0007 	bic.w	r0, r0, #7
 8002ed4:	1ac2      	subs	r2, r0, r3
 8002ed6:	bf1c      	itt	ne
 8002ed8:	1a1b      	subne	r3, r3, r0
 8002eda:	50a3      	strne	r3, [r4, r2]
 8002edc:	e7af      	b.n	8002e3e <_malloc_r+0x22>
 8002ede:	6862      	ldr	r2, [r4, #4]
 8002ee0:	42a3      	cmp	r3, r4
 8002ee2:	bf0c      	ite	eq
 8002ee4:	f8c8 2000 	streq.w	r2, [r8]
 8002ee8:	605a      	strne	r2, [r3, #4]
 8002eea:	e7eb      	b.n	8002ec4 <_malloc_r+0xa8>
 8002eec:	4623      	mov	r3, r4
 8002eee:	6864      	ldr	r4, [r4, #4]
 8002ef0:	e7ae      	b.n	8002e50 <_malloc_r+0x34>
 8002ef2:	463c      	mov	r4, r7
 8002ef4:	687f      	ldr	r7, [r7, #4]
 8002ef6:	e7b6      	b.n	8002e66 <_malloc_r+0x4a>
 8002ef8:	461a      	mov	r2, r3
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	d1fb      	bne.n	8002ef8 <_malloc_r+0xdc>
 8002f00:	2300      	movs	r3, #0
 8002f02:	6053      	str	r3, [r2, #4]
 8002f04:	e7de      	b.n	8002ec4 <_malloc_r+0xa8>
 8002f06:	230c      	movs	r3, #12
 8002f08:	6033      	str	r3, [r6, #0]
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	f000 f80c 	bl	8002f28 <__malloc_unlock>
 8002f10:	e794      	b.n	8002e3c <_malloc_r+0x20>
 8002f12:	6005      	str	r5, [r0, #0]
 8002f14:	e7d6      	b.n	8002ec4 <_malloc_r+0xa8>
 8002f16:	bf00      	nop
 8002f18:	200002ac 	.word	0x200002ac

08002f1c <__malloc_lock>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	@ (8002f24 <__malloc_lock+0x8>)
 8002f1e:	f7ff bf0e 	b.w	8002d3e <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	200002a4 	.word	0x200002a4

08002f28 <__malloc_unlock>:
 8002f28:	4801      	ldr	r0, [pc, #4]	@ (8002f30 <__malloc_unlock+0x8>)
 8002f2a:	f7ff bf09 	b.w	8002d40 <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	200002a4 	.word	0x200002a4

08002f34 <__sfputc_r>:
 8002f34:	6893      	ldr	r3, [r2, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	b410      	push	{r4}
 8002f3c:	6093      	str	r3, [r2, #8]
 8002f3e:	da08      	bge.n	8002f52 <__sfputc_r+0x1e>
 8002f40:	6994      	ldr	r4, [r2, #24]
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	db01      	blt.n	8002f4a <__sfputc_r+0x16>
 8002f46:	290a      	cmp	r1, #10
 8002f48:	d103      	bne.n	8002f52 <__sfputc_r+0x1e>
 8002f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f4e:	f000 bb6d 	b.w	800362c <__swbuf_r>
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	1c58      	adds	r0, r3, #1
 8002f56:	6010      	str	r0, [r2, #0]
 8002f58:	7019      	strb	r1, [r3, #0]
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <__sfputs_r>:
 8002f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f64:	4606      	mov	r6, r0
 8002f66:	460f      	mov	r7, r1
 8002f68:	4614      	mov	r4, r2
 8002f6a:	18d5      	adds	r5, r2, r3
 8002f6c:	42ac      	cmp	r4, r5
 8002f6e:	d101      	bne.n	8002f74 <__sfputs_r+0x12>
 8002f70:	2000      	movs	r0, #0
 8002f72:	e007      	b.n	8002f84 <__sfputs_r+0x22>
 8002f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f78:	463a      	mov	r2, r7
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f7ff ffda 	bl	8002f34 <__sfputc_r>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d1f3      	bne.n	8002f6c <__sfputs_r+0xa>
 8002f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f88 <_vfiprintf_r>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	460d      	mov	r5, r1
 8002f8e:	b09d      	sub	sp, #116	@ 0x74
 8002f90:	4614      	mov	r4, r2
 8002f92:	4698      	mov	r8, r3
 8002f94:	4606      	mov	r6, r0
 8002f96:	b118      	cbz	r0, 8002fa0 <_vfiprintf_r+0x18>
 8002f98:	6a03      	ldr	r3, [r0, #32]
 8002f9a:	b90b      	cbnz	r3, 8002fa0 <_vfiprintf_r+0x18>
 8002f9c:	f7ff fdca 	bl	8002b34 <__sinit>
 8002fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fa2:	07d9      	lsls	r1, r3, #31
 8002fa4:	d405      	bmi.n	8002fb2 <_vfiprintf_r+0x2a>
 8002fa6:	89ab      	ldrh	r3, [r5, #12]
 8002fa8:	059a      	lsls	r2, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_vfiprintf_r+0x2a>
 8002fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fae:	f7ff fec6 	bl	8002d3e <__retarget_lock_acquire_recursive>
 8002fb2:	89ab      	ldrh	r3, [r5, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	d501      	bpl.n	8002fbc <_vfiprintf_r+0x34>
 8002fb8:	692b      	ldr	r3, [r5, #16]
 8002fba:	b99b      	cbnz	r3, 8002fe4 <_vfiprintf_r+0x5c>
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f000 fb72 	bl	80036a8 <__swsetup_r>
 8002fc4:	b170      	cbz	r0, 8002fe4 <_vfiprintf_r+0x5c>
 8002fc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002fc8:	07dc      	lsls	r4, r3, #31
 8002fca:	d504      	bpl.n	8002fd6 <_vfiprintf_r+0x4e>
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b01d      	add	sp, #116	@ 0x74
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	0598      	lsls	r0, r3, #22
 8002fda:	d4f7      	bmi.n	8002fcc <_vfiprintf_r+0x44>
 8002fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fde:	f7ff feaf 	bl	8002d40 <__retarget_lock_release_recursive>
 8002fe2:	e7f3      	b.n	8002fcc <_vfiprintf_r+0x44>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fe8:	2320      	movs	r3, #32
 8002fea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff2:	2330      	movs	r3, #48	@ 0x30
 8002ff4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80031a4 <_vfiprintf_r+0x21c>
 8002ff8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ffc:	f04f 0901 	mov.w	r9, #1
 8003000:	4623      	mov	r3, r4
 8003002:	469a      	mov	sl, r3
 8003004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003008:	b10a      	cbz	r2, 800300e <_vfiprintf_r+0x86>
 800300a:	2a25      	cmp	r2, #37	@ 0x25
 800300c:	d1f9      	bne.n	8003002 <_vfiprintf_r+0x7a>
 800300e:	ebba 0b04 	subs.w	fp, sl, r4
 8003012:	d00b      	beq.n	800302c <_vfiprintf_r+0xa4>
 8003014:	465b      	mov	r3, fp
 8003016:	4622      	mov	r2, r4
 8003018:	4629      	mov	r1, r5
 800301a:	4630      	mov	r0, r6
 800301c:	f7ff ffa1 	bl	8002f62 <__sfputs_r>
 8003020:	3001      	adds	r0, #1
 8003022:	f000 80a7 	beq.w	8003174 <_vfiprintf_r+0x1ec>
 8003026:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003028:	445a      	add	r2, fp
 800302a:	9209      	str	r2, [sp, #36]	@ 0x24
 800302c:	f89a 3000 	ldrb.w	r3, [sl]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 809f 	beq.w	8003174 <_vfiprintf_r+0x1ec>
 8003036:	2300      	movs	r3, #0
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003040:	f10a 0a01 	add.w	sl, sl, #1
 8003044:	9304      	str	r3, [sp, #16]
 8003046:	9307      	str	r3, [sp, #28]
 8003048:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800304c:	931a      	str	r3, [sp, #104]	@ 0x68
 800304e:	4654      	mov	r4, sl
 8003050:	2205      	movs	r2, #5
 8003052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003056:	4853      	ldr	r0, [pc, #332]	@ (80031a4 <_vfiprintf_r+0x21c>)
 8003058:	f7fd f8e2 	bl	8000220 <memchr>
 800305c:	9a04      	ldr	r2, [sp, #16]
 800305e:	b9d8      	cbnz	r0, 8003098 <_vfiprintf_r+0x110>
 8003060:	06d1      	lsls	r1, r2, #27
 8003062:	bf44      	itt	mi
 8003064:	2320      	movmi	r3, #32
 8003066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306a:	0713      	lsls	r3, r2, #28
 800306c:	bf44      	itt	mi
 800306e:	232b      	movmi	r3, #43	@ 0x2b
 8003070:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003074:	f89a 3000 	ldrb.w	r3, [sl]
 8003078:	2b2a      	cmp	r3, #42	@ 0x2a
 800307a:	d015      	beq.n	80030a8 <_vfiprintf_r+0x120>
 800307c:	9a07      	ldr	r2, [sp, #28]
 800307e:	4654      	mov	r4, sl
 8003080:	2000      	movs	r0, #0
 8003082:	f04f 0c0a 	mov.w	ip, #10
 8003086:	4621      	mov	r1, r4
 8003088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800308c:	3b30      	subs	r3, #48	@ 0x30
 800308e:	2b09      	cmp	r3, #9
 8003090:	d94b      	bls.n	800312a <_vfiprintf_r+0x1a2>
 8003092:	b1b0      	cbz	r0, 80030c2 <_vfiprintf_r+0x13a>
 8003094:	9207      	str	r2, [sp, #28]
 8003096:	e014      	b.n	80030c2 <_vfiprintf_r+0x13a>
 8003098:	eba0 0308 	sub.w	r3, r0, r8
 800309c:	fa09 f303 	lsl.w	r3, r9, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	9304      	str	r3, [sp, #16]
 80030a4:	46a2      	mov	sl, r4
 80030a6:	e7d2      	b.n	800304e <_vfiprintf_r+0xc6>
 80030a8:	9b03      	ldr	r3, [sp, #12]
 80030aa:	1d19      	adds	r1, r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	9103      	str	r1, [sp, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bfbb      	ittet	lt
 80030b4:	425b      	neglt	r3, r3
 80030b6:	f042 0202 	orrlt.w	r2, r2, #2
 80030ba:	9307      	strge	r3, [sp, #28]
 80030bc:	9307      	strlt	r3, [sp, #28]
 80030be:	bfb8      	it	lt
 80030c0:	9204      	strlt	r2, [sp, #16]
 80030c2:	7823      	ldrb	r3, [r4, #0]
 80030c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80030c6:	d10a      	bne.n	80030de <_vfiprintf_r+0x156>
 80030c8:	7863      	ldrb	r3, [r4, #1]
 80030ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80030cc:	d132      	bne.n	8003134 <_vfiprintf_r+0x1ac>
 80030ce:	9b03      	ldr	r3, [sp, #12]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	9203      	str	r2, [sp, #12]
 80030d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030da:	3402      	adds	r4, #2
 80030dc:	9305      	str	r3, [sp, #20]
 80030de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80031b4 <_vfiprintf_r+0x22c>
 80030e2:	7821      	ldrb	r1, [r4, #0]
 80030e4:	2203      	movs	r2, #3
 80030e6:	4650      	mov	r0, sl
 80030e8:	f7fd f89a 	bl	8000220 <memchr>
 80030ec:	b138      	cbz	r0, 80030fe <_vfiprintf_r+0x176>
 80030ee:	9b04      	ldr	r3, [sp, #16]
 80030f0:	eba0 000a 	sub.w	r0, r0, sl
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	4082      	lsls	r2, r0
 80030f8:	4313      	orrs	r3, r2
 80030fa:	3401      	adds	r4, #1
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003102:	4829      	ldr	r0, [pc, #164]	@ (80031a8 <_vfiprintf_r+0x220>)
 8003104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003108:	2206      	movs	r2, #6
 800310a:	f7fd f889 	bl	8000220 <memchr>
 800310e:	2800      	cmp	r0, #0
 8003110:	d03f      	beq.n	8003192 <_vfiprintf_r+0x20a>
 8003112:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <_vfiprintf_r+0x224>)
 8003114:	bb1b      	cbnz	r3, 800315e <_vfiprintf_r+0x1d6>
 8003116:	9b03      	ldr	r3, [sp, #12]
 8003118:	3307      	adds	r3, #7
 800311a:	f023 0307 	bic.w	r3, r3, #7
 800311e:	3308      	adds	r3, #8
 8003120:	9303      	str	r3, [sp, #12]
 8003122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003124:	443b      	add	r3, r7
 8003126:	9309      	str	r3, [sp, #36]	@ 0x24
 8003128:	e76a      	b.n	8003000 <_vfiprintf_r+0x78>
 800312a:	fb0c 3202 	mla	r2, ip, r2, r3
 800312e:	460c      	mov	r4, r1
 8003130:	2001      	movs	r0, #1
 8003132:	e7a8      	b.n	8003086 <_vfiprintf_r+0xfe>
 8003134:	2300      	movs	r3, #0
 8003136:	3401      	adds	r4, #1
 8003138:	9305      	str	r3, [sp, #20]
 800313a:	4619      	mov	r1, r3
 800313c:	f04f 0c0a 	mov.w	ip, #10
 8003140:	4620      	mov	r0, r4
 8003142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003146:	3a30      	subs	r2, #48	@ 0x30
 8003148:	2a09      	cmp	r2, #9
 800314a:	d903      	bls.n	8003154 <_vfiprintf_r+0x1cc>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0c6      	beq.n	80030de <_vfiprintf_r+0x156>
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	e7c4      	b.n	80030de <_vfiprintf_r+0x156>
 8003154:	fb0c 2101 	mla	r1, ip, r1, r2
 8003158:	4604      	mov	r4, r0
 800315a:	2301      	movs	r3, #1
 800315c:	e7f0      	b.n	8003140 <_vfiprintf_r+0x1b8>
 800315e:	ab03      	add	r3, sp, #12
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	462a      	mov	r2, r5
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <_vfiprintf_r+0x228>)
 8003166:	a904      	add	r1, sp, #16
 8003168:	4630      	mov	r0, r6
 800316a:	f3af 8000 	nop.w
 800316e:	4607      	mov	r7, r0
 8003170:	1c78      	adds	r0, r7, #1
 8003172:	d1d6      	bne.n	8003122 <_vfiprintf_r+0x19a>
 8003174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003176:	07d9      	lsls	r1, r3, #31
 8003178:	d405      	bmi.n	8003186 <_vfiprintf_r+0x1fe>
 800317a:	89ab      	ldrh	r3, [r5, #12]
 800317c:	059a      	lsls	r2, r3, #22
 800317e:	d402      	bmi.n	8003186 <_vfiprintf_r+0x1fe>
 8003180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003182:	f7ff fddd 	bl	8002d40 <__retarget_lock_release_recursive>
 8003186:	89ab      	ldrh	r3, [r5, #12]
 8003188:	065b      	lsls	r3, r3, #25
 800318a:	f53f af1f 	bmi.w	8002fcc <_vfiprintf_r+0x44>
 800318e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003190:	e71e      	b.n	8002fd0 <_vfiprintf_r+0x48>
 8003192:	ab03      	add	r3, sp, #12
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	462a      	mov	r2, r5
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <_vfiprintf_r+0x228>)
 800319a:	a904      	add	r1, sp, #16
 800319c:	4630      	mov	r0, r6
 800319e:	f000 f879 	bl	8003294 <_printf_i>
 80031a2:	e7e4      	b.n	800316e <_vfiprintf_r+0x1e6>
 80031a4:	080038d0 	.word	0x080038d0
 80031a8:	080038da 	.word	0x080038da
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08002f63 	.word	0x08002f63
 80031b4:	080038d6 	.word	0x080038d6

080031b8 <_printf_common>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	4616      	mov	r6, r2
 80031be:	4698      	mov	r8, r3
 80031c0:	688a      	ldr	r2, [r1, #8]
 80031c2:	690b      	ldr	r3, [r1, #16]
 80031c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bfb8      	it	lt
 80031cc:	4613      	movlt	r3, r2
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031d4:	4607      	mov	r7, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	b10a      	cbz	r2, 80031de <_printf_common+0x26>
 80031da:	3301      	adds	r3, #1
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	0699      	lsls	r1, r3, #26
 80031e2:	bf42      	ittt	mi
 80031e4:	6833      	ldrmi	r3, [r6, #0]
 80031e6:	3302      	addmi	r3, #2
 80031e8:	6033      	strmi	r3, [r6, #0]
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	f015 0506 	ands.w	r5, r5, #6
 80031f0:	d106      	bne.n	8003200 <_printf_common+0x48>
 80031f2:	f104 0a19 	add.w	sl, r4, #25
 80031f6:	68e3      	ldr	r3, [r4, #12]
 80031f8:	6832      	ldr	r2, [r6, #0]
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	42ab      	cmp	r3, r5
 80031fe:	dc26      	bgt.n	800324e <_printf_common+0x96>
 8003200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	3b00      	subs	r3, #0
 8003208:	bf18      	it	ne
 800320a:	2301      	movne	r3, #1
 800320c:	0692      	lsls	r2, r2, #26
 800320e:	d42b      	bmi.n	8003268 <_printf_common+0xb0>
 8003210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003214:	4641      	mov	r1, r8
 8003216:	4638      	mov	r0, r7
 8003218:	47c8      	blx	r9
 800321a:	3001      	adds	r0, #1
 800321c:	d01e      	beq.n	800325c <_printf_common+0xa4>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	6922      	ldr	r2, [r4, #16]
 8003222:	f003 0306 	and.w	r3, r3, #6
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf02      	ittt	eq
 800322a:	68e5      	ldreq	r5, [r4, #12]
 800322c:	6833      	ldreq	r3, [r6, #0]
 800322e:	1aed      	subeq	r5, r5, r3
 8003230:	68a3      	ldr	r3, [r4, #8]
 8003232:	bf0c      	ite	eq
 8003234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003238:	2500      	movne	r5, #0
 800323a:	4293      	cmp	r3, r2
 800323c:	bfc4      	itt	gt
 800323e:	1a9b      	subgt	r3, r3, r2
 8003240:	18ed      	addgt	r5, r5, r3
 8003242:	2600      	movs	r6, #0
 8003244:	341a      	adds	r4, #26
 8003246:	42b5      	cmp	r5, r6
 8003248:	d11a      	bne.n	8003280 <_printf_common+0xc8>
 800324a:	2000      	movs	r0, #0
 800324c:	e008      	b.n	8003260 <_printf_common+0xa8>
 800324e:	2301      	movs	r3, #1
 8003250:	4652      	mov	r2, sl
 8003252:	4641      	mov	r1, r8
 8003254:	4638      	mov	r0, r7
 8003256:	47c8      	blx	r9
 8003258:	3001      	adds	r0, #1
 800325a:	d103      	bne.n	8003264 <_printf_common+0xac>
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003264:	3501      	adds	r5, #1
 8003266:	e7c6      	b.n	80031f6 <_printf_common+0x3e>
 8003268:	18e1      	adds	r1, r4, r3
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	2030      	movs	r0, #48	@ 0x30
 800326e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003272:	4422      	add	r2, r4
 8003274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800327c:	3302      	adds	r3, #2
 800327e:	e7c7      	b.n	8003210 <_printf_common+0x58>
 8003280:	2301      	movs	r3, #1
 8003282:	4622      	mov	r2, r4
 8003284:	4641      	mov	r1, r8
 8003286:	4638      	mov	r0, r7
 8003288:	47c8      	blx	r9
 800328a:	3001      	adds	r0, #1
 800328c:	d0e6      	beq.n	800325c <_printf_common+0xa4>
 800328e:	3601      	adds	r6, #1
 8003290:	e7d9      	b.n	8003246 <_printf_common+0x8e>
	...

08003294 <_printf_i>:
 8003294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	7e0f      	ldrb	r7, [r1, #24]
 800329a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800329c:	2f78      	cmp	r7, #120	@ 0x78
 800329e:	4691      	mov	r9, r2
 80032a0:	4680      	mov	r8, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	469a      	mov	sl, r3
 80032a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032aa:	d807      	bhi.n	80032bc <_printf_i+0x28>
 80032ac:	2f62      	cmp	r7, #98	@ 0x62
 80032ae:	d80a      	bhi.n	80032c6 <_printf_i+0x32>
 80032b0:	2f00      	cmp	r7, #0
 80032b2:	f000 80d2 	beq.w	800345a <_printf_i+0x1c6>
 80032b6:	2f58      	cmp	r7, #88	@ 0x58
 80032b8:	f000 80b9 	beq.w	800342e <_printf_i+0x19a>
 80032bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032c4:	e03a      	b.n	800333c <_printf_i+0xa8>
 80032c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032ca:	2b15      	cmp	r3, #21
 80032cc:	d8f6      	bhi.n	80032bc <_printf_i+0x28>
 80032ce:	a101      	add	r1, pc, #4	@ (adr r1, 80032d4 <_printf_i+0x40>)
 80032d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	08003341 	.word	0x08003341
 80032dc:	080032bd 	.word	0x080032bd
 80032e0:	080032bd 	.word	0x080032bd
 80032e4:	080032bd 	.word	0x080032bd
 80032e8:	080032bd 	.word	0x080032bd
 80032ec:	08003341 	.word	0x08003341
 80032f0:	080032bd 	.word	0x080032bd
 80032f4:	080032bd 	.word	0x080032bd
 80032f8:	080032bd 	.word	0x080032bd
 80032fc:	080032bd 	.word	0x080032bd
 8003300:	08003441 	.word	0x08003441
 8003304:	0800336b 	.word	0x0800336b
 8003308:	080033fb 	.word	0x080033fb
 800330c:	080032bd 	.word	0x080032bd
 8003310:	080032bd 	.word	0x080032bd
 8003314:	08003463 	.word	0x08003463
 8003318:	080032bd 	.word	0x080032bd
 800331c:	0800336b 	.word	0x0800336b
 8003320:	080032bd 	.word	0x080032bd
 8003324:	080032bd 	.word	0x080032bd
 8003328:	08003403 	.word	0x08003403
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	1d1a      	adds	r2, r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6032      	str	r2, [r6, #0]
 8003334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800333c:	2301      	movs	r3, #1
 800333e:	e09d      	b.n	800347c <_printf_i+0x1e8>
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	6031      	str	r1, [r6, #0]
 8003348:	0606      	lsls	r6, r0, #24
 800334a:	d501      	bpl.n	8003350 <_printf_i+0xbc>
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	e003      	b.n	8003358 <_printf_i+0xc4>
 8003350:	0645      	lsls	r5, r0, #25
 8003352:	d5fb      	bpl.n	800334c <_printf_i+0xb8>
 8003354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003358:	2d00      	cmp	r5, #0
 800335a:	da03      	bge.n	8003364 <_printf_i+0xd0>
 800335c:	232d      	movs	r3, #45	@ 0x2d
 800335e:	426d      	negs	r5, r5
 8003360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003364:	4859      	ldr	r0, [pc, #356]	@ (80034cc <_printf_i+0x238>)
 8003366:	230a      	movs	r3, #10
 8003368:	e011      	b.n	800338e <_printf_i+0xfa>
 800336a:	6821      	ldr	r1, [r4, #0]
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	0608      	lsls	r0, r1, #24
 8003370:	f853 5b04 	ldr.w	r5, [r3], #4
 8003374:	d402      	bmi.n	800337c <_printf_i+0xe8>
 8003376:	0649      	lsls	r1, r1, #25
 8003378:	bf48      	it	mi
 800337a:	b2ad      	uxthmi	r5, r5
 800337c:	2f6f      	cmp	r7, #111	@ 0x6f
 800337e:	4853      	ldr	r0, [pc, #332]	@ (80034cc <_printf_i+0x238>)
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	bf14      	ite	ne
 8003384:	230a      	movne	r3, #10
 8003386:	2308      	moveq	r3, #8
 8003388:	2100      	movs	r1, #0
 800338a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800338e:	6866      	ldr	r6, [r4, #4]
 8003390:	60a6      	str	r6, [r4, #8]
 8003392:	2e00      	cmp	r6, #0
 8003394:	bfa2      	ittt	ge
 8003396:	6821      	ldrge	r1, [r4, #0]
 8003398:	f021 0104 	bicge.w	r1, r1, #4
 800339c:	6021      	strge	r1, [r4, #0]
 800339e:	b90d      	cbnz	r5, 80033a4 <_printf_i+0x110>
 80033a0:	2e00      	cmp	r6, #0
 80033a2:	d04b      	beq.n	800343c <_printf_i+0x1a8>
 80033a4:	4616      	mov	r6, r2
 80033a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80033aa:	fb03 5711 	mls	r7, r3, r1, r5
 80033ae:	5dc7      	ldrb	r7, [r0, r7]
 80033b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033b4:	462f      	mov	r7, r5
 80033b6:	42bb      	cmp	r3, r7
 80033b8:	460d      	mov	r5, r1
 80033ba:	d9f4      	bls.n	80033a6 <_printf_i+0x112>
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d10b      	bne.n	80033d8 <_printf_i+0x144>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	07df      	lsls	r7, r3, #31
 80033c4:	d508      	bpl.n	80033d8 <_printf_i+0x144>
 80033c6:	6923      	ldr	r3, [r4, #16]
 80033c8:	6861      	ldr	r1, [r4, #4]
 80033ca:	4299      	cmp	r1, r3
 80033cc:	bfde      	ittt	le
 80033ce:	2330      	movle	r3, #48	@ 0x30
 80033d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033d8:	1b92      	subs	r2, r2, r6
 80033da:	6122      	str	r2, [r4, #16]
 80033dc:	f8cd a000 	str.w	sl, [sp]
 80033e0:	464b      	mov	r3, r9
 80033e2:	aa03      	add	r2, sp, #12
 80033e4:	4621      	mov	r1, r4
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff fee6 	bl	80031b8 <_printf_common>
 80033ec:	3001      	adds	r0, #1
 80033ee:	d14a      	bne.n	8003486 <_printf_i+0x1f2>
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	b004      	add	sp, #16
 80033f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	f043 0320 	orr.w	r3, r3, #32
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	4833      	ldr	r0, [pc, #204]	@ (80034d0 <_printf_i+0x23c>)
 8003404:	2778      	movs	r7, #120	@ 0x78
 8003406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	6831      	ldr	r1, [r6, #0]
 800340e:	061f      	lsls	r7, r3, #24
 8003410:	f851 5b04 	ldr.w	r5, [r1], #4
 8003414:	d402      	bmi.n	800341c <_printf_i+0x188>
 8003416:	065f      	lsls	r7, r3, #25
 8003418:	bf48      	it	mi
 800341a:	b2ad      	uxthmi	r5, r5
 800341c:	6031      	str	r1, [r6, #0]
 800341e:	07d9      	lsls	r1, r3, #31
 8003420:	bf44      	itt	mi
 8003422:	f043 0320 	orrmi.w	r3, r3, #32
 8003426:	6023      	strmi	r3, [r4, #0]
 8003428:	b11d      	cbz	r5, 8003432 <_printf_i+0x19e>
 800342a:	2310      	movs	r3, #16
 800342c:	e7ac      	b.n	8003388 <_printf_i+0xf4>
 800342e:	4827      	ldr	r0, [pc, #156]	@ (80034cc <_printf_i+0x238>)
 8003430:	e7e9      	b.n	8003406 <_printf_i+0x172>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	f023 0320 	bic.w	r3, r3, #32
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	e7f6      	b.n	800342a <_printf_i+0x196>
 800343c:	4616      	mov	r6, r2
 800343e:	e7bd      	b.n	80033bc <_printf_i+0x128>
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	6825      	ldr	r5, [r4, #0]
 8003444:	6961      	ldr	r1, [r4, #20]
 8003446:	1d18      	adds	r0, r3, #4
 8003448:	6030      	str	r0, [r6, #0]
 800344a:	062e      	lsls	r6, r5, #24
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	d501      	bpl.n	8003454 <_printf_i+0x1c0>
 8003450:	6019      	str	r1, [r3, #0]
 8003452:	e002      	b.n	800345a <_printf_i+0x1c6>
 8003454:	0668      	lsls	r0, r5, #25
 8003456:	d5fb      	bpl.n	8003450 <_printf_i+0x1bc>
 8003458:	8019      	strh	r1, [r3, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	6123      	str	r3, [r4, #16]
 800345e:	4616      	mov	r6, r2
 8003460:	e7bc      	b.n	80033dc <_printf_i+0x148>
 8003462:	6833      	ldr	r3, [r6, #0]
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	6032      	str	r2, [r6, #0]
 8003468:	681e      	ldr	r6, [r3, #0]
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	2100      	movs	r1, #0
 800346e:	4630      	mov	r0, r6
 8003470:	f7fc fed6 	bl	8000220 <memchr>
 8003474:	b108      	cbz	r0, 800347a <_printf_i+0x1e6>
 8003476:	1b80      	subs	r0, r0, r6
 8003478:	6060      	str	r0, [r4, #4]
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	6123      	str	r3, [r4, #16]
 800347e:	2300      	movs	r3, #0
 8003480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003484:	e7aa      	b.n	80033dc <_printf_i+0x148>
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	4632      	mov	r2, r6
 800348a:	4649      	mov	r1, r9
 800348c:	4640      	mov	r0, r8
 800348e:	47d0      	blx	sl
 8003490:	3001      	adds	r0, #1
 8003492:	d0ad      	beq.n	80033f0 <_printf_i+0x15c>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	079b      	lsls	r3, r3, #30
 8003498:	d413      	bmi.n	80034c2 <_printf_i+0x22e>
 800349a:	68e0      	ldr	r0, [r4, #12]
 800349c:	9b03      	ldr	r3, [sp, #12]
 800349e:	4298      	cmp	r0, r3
 80034a0:	bfb8      	it	lt
 80034a2:	4618      	movlt	r0, r3
 80034a4:	e7a6      	b.n	80033f4 <_printf_i+0x160>
 80034a6:	2301      	movs	r3, #1
 80034a8:	4632      	mov	r2, r6
 80034aa:	4649      	mov	r1, r9
 80034ac:	4640      	mov	r0, r8
 80034ae:	47d0      	blx	sl
 80034b0:	3001      	adds	r0, #1
 80034b2:	d09d      	beq.n	80033f0 <_printf_i+0x15c>
 80034b4:	3501      	adds	r5, #1
 80034b6:	68e3      	ldr	r3, [r4, #12]
 80034b8:	9903      	ldr	r1, [sp, #12]
 80034ba:	1a5b      	subs	r3, r3, r1
 80034bc:	42ab      	cmp	r3, r5
 80034be:	dcf2      	bgt.n	80034a6 <_printf_i+0x212>
 80034c0:	e7eb      	b.n	800349a <_printf_i+0x206>
 80034c2:	2500      	movs	r5, #0
 80034c4:	f104 0619 	add.w	r6, r4, #25
 80034c8:	e7f5      	b.n	80034b6 <_printf_i+0x222>
 80034ca:	bf00      	nop
 80034cc:	080038e1 	.word	0x080038e1
 80034d0:	080038f2 	.word	0x080038f2

080034d4 <__sflush_r>:
 80034d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034dc:	0716      	lsls	r6, r2, #28
 80034de:	4605      	mov	r5, r0
 80034e0:	460c      	mov	r4, r1
 80034e2:	d454      	bmi.n	800358e <__sflush_r+0xba>
 80034e4:	684b      	ldr	r3, [r1, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	dc02      	bgt.n	80034f0 <__sflush_r+0x1c>
 80034ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dd48      	ble.n	8003582 <__sflush_r+0xae>
 80034f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034f2:	2e00      	cmp	r6, #0
 80034f4:	d045      	beq.n	8003582 <__sflush_r+0xae>
 80034f6:	2300      	movs	r3, #0
 80034f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034fc:	682f      	ldr	r7, [r5, #0]
 80034fe:	6a21      	ldr	r1, [r4, #32]
 8003500:	602b      	str	r3, [r5, #0]
 8003502:	d030      	beq.n	8003566 <__sflush_r+0x92>
 8003504:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003506:	89a3      	ldrh	r3, [r4, #12]
 8003508:	0759      	lsls	r1, r3, #29
 800350a:	d505      	bpl.n	8003518 <__sflush_r+0x44>
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	1ad2      	subs	r2, r2, r3
 8003510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003512:	b10b      	cbz	r3, 8003518 <__sflush_r+0x44>
 8003514:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	2300      	movs	r3, #0
 800351a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800351c:	6a21      	ldr	r1, [r4, #32]
 800351e:	4628      	mov	r0, r5
 8003520:	47b0      	blx	r6
 8003522:	1c43      	adds	r3, r0, #1
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	d106      	bne.n	8003536 <__sflush_r+0x62>
 8003528:	6829      	ldr	r1, [r5, #0]
 800352a:	291d      	cmp	r1, #29
 800352c:	d82b      	bhi.n	8003586 <__sflush_r+0xb2>
 800352e:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <__sflush_r+0x104>)
 8003530:	410a      	asrs	r2, r1
 8003532:	07d6      	lsls	r6, r2, #31
 8003534:	d427      	bmi.n	8003586 <__sflush_r+0xb2>
 8003536:	2200      	movs	r2, #0
 8003538:	6062      	str	r2, [r4, #4]
 800353a:	04d9      	lsls	r1, r3, #19
 800353c:	6922      	ldr	r2, [r4, #16]
 800353e:	6022      	str	r2, [r4, #0]
 8003540:	d504      	bpl.n	800354c <__sflush_r+0x78>
 8003542:	1c42      	adds	r2, r0, #1
 8003544:	d101      	bne.n	800354a <__sflush_r+0x76>
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	b903      	cbnz	r3, 800354c <__sflush_r+0x78>
 800354a:	6560      	str	r0, [r4, #84]	@ 0x54
 800354c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800354e:	602f      	str	r7, [r5, #0]
 8003550:	b1b9      	cbz	r1, 8003582 <__sflush_r+0xae>
 8003552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003556:	4299      	cmp	r1, r3
 8003558:	d002      	beq.n	8003560 <__sflush_r+0x8c>
 800355a:	4628      	mov	r0, r5
 800355c:	f7ff fbf2 	bl	8002d44 <_free_r>
 8003560:	2300      	movs	r3, #0
 8003562:	6363      	str	r3, [r4, #52]	@ 0x34
 8003564:	e00d      	b.n	8003582 <__sflush_r+0xae>
 8003566:	2301      	movs	r3, #1
 8003568:	4628      	mov	r0, r5
 800356a:	47b0      	blx	r6
 800356c:	4602      	mov	r2, r0
 800356e:	1c50      	adds	r0, r2, #1
 8003570:	d1c9      	bne.n	8003506 <__sflush_r+0x32>
 8003572:	682b      	ldr	r3, [r5, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0c6      	beq.n	8003506 <__sflush_r+0x32>
 8003578:	2b1d      	cmp	r3, #29
 800357a:	d001      	beq.n	8003580 <__sflush_r+0xac>
 800357c:	2b16      	cmp	r3, #22
 800357e:	d11e      	bne.n	80035be <__sflush_r+0xea>
 8003580:	602f      	str	r7, [r5, #0]
 8003582:	2000      	movs	r0, #0
 8003584:	e022      	b.n	80035cc <__sflush_r+0xf8>
 8003586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800358a:	b21b      	sxth	r3, r3
 800358c:	e01b      	b.n	80035c6 <__sflush_r+0xf2>
 800358e:	690f      	ldr	r7, [r1, #16]
 8003590:	2f00      	cmp	r7, #0
 8003592:	d0f6      	beq.n	8003582 <__sflush_r+0xae>
 8003594:	0793      	lsls	r3, r2, #30
 8003596:	680e      	ldr	r6, [r1, #0]
 8003598:	bf08      	it	eq
 800359a:	694b      	ldreq	r3, [r1, #20]
 800359c:	600f      	str	r7, [r1, #0]
 800359e:	bf18      	it	ne
 80035a0:	2300      	movne	r3, #0
 80035a2:	eba6 0807 	sub.w	r8, r6, r7
 80035a6:	608b      	str	r3, [r1, #8]
 80035a8:	f1b8 0f00 	cmp.w	r8, #0
 80035ac:	dde9      	ble.n	8003582 <__sflush_r+0xae>
 80035ae:	6a21      	ldr	r1, [r4, #32]
 80035b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035b2:	4643      	mov	r3, r8
 80035b4:	463a      	mov	r2, r7
 80035b6:	4628      	mov	r0, r5
 80035b8:	47b0      	blx	r6
 80035ba:	2800      	cmp	r0, #0
 80035bc:	dc08      	bgt.n	80035d0 <__sflush_r+0xfc>
 80035be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d0:	4407      	add	r7, r0
 80035d2:	eba8 0800 	sub.w	r8, r8, r0
 80035d6:	e7e7      	b.n	80035a8 <__sflush_r+0xd4>
 80035d8:	dfbffffe 	.word	0xdfbffffe

080035dc <_fflush_r>:
 80035dc:	b538      	push	{r3, r4, r5, lr}
 80035de:	690b      	ldr	r3, [r1, #16]
 80035e0:	4605      	mov	r5, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	b913      	cbnz	r3, 80035ec <_fflush_r+0x10>
 80035e6:	2500      	movs	r5, #0
 80035e8:	4628      	mov	r0, r5
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
 80035ec:	b118      	cbz	r0, 80035f6 <_fflush_r+0x1a>
 80035ee:	6a03      	ldr	r3, [r0, #32]
 80035f0:	b90b      	cbnz	r3, 80035f6 <_fflush_r+0x1a>
 80035f2:	f7ff fa9f 	bl	8002b34 <__sinit>
 80035f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f3      	beq.n	80035e6 <_fflush_r+0xa>
 80035fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003600:	07d0      	lsls	r0, r2, #31
 8003602:	d404      	bmi.n	800360e <_fflush_r+0x32>
 8003604:	0599      	lsls	r1, r3, #22
 8003606:	d402      	bmi.n	800360e <_fflush_r+0x32>
 8003608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800360a:	f7ff fb98 	bl	8002d3e <__retarget_lock_acquire_recursive>
 800360e:	4628      	mov	r0, r5
 8003610:	4621      	mov	r1, r4
 8003612:	f7ff ff5f 	bl	80034d4 <__sflush_r>
 8003616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003618:	07da      	lsls	r2, r3, #31
 800361a:	4605      	mov	r5, r0
 800361c:	d4e4      	bmi.n	80035e8 <_fflush_r+0xc>
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	059b      	lsls	r3, r3, #22
 8003622:	d4e1      	bmi.n	80035e8 <_fflush_r+0xc>
 8003624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003626:	f7ff fb8b 	bl	8002d40 <__retarget_lock_release_recursive>
 800362a:	e7dd      	b.n	80035e8 <_fflush_r+0xc>

0800362c <__swbuf_r>:
 800362c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362e:	460e      	mov	r6, r1
 8003630:	4614      	mov	r4, r2
 8003632:	4605      	mov	r5, r0
 8003634:	b118      	cbz	r0, 800363e <__swbuf_r+0x12>
 8003636:	6a03      	ldr	r3, [r0, #32]
 8003638:	b90b      	cbnz	r3, 800363e <__swbuf_r+0x12>
 800363a:	f7ff fa7b 	bl	8002b34 <__sinit>
 800363e:	69a3      	ldr	r3, [r4, #24]
 8003640:	60a3      	str	r3, [r4, #8]
 8003642:	89a3      	ldrh	r3, [r4, #12]
 8003644:	071a      	lsls	r2, r3, #28
 8003646:	d501      	bpl.n	800364c <__swbuf_r+0x20>
 8003648:	6923      	ldr	r3, [r4, #16]
 800364a:	b943      	cbnz	r3, 800365e <__swbuf_r+0x32>
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	f000 f82a 	bl	80036a8 <__swsetup_r>
 8003654:	b118      	cbz	r0, 800365e <__swbuf_r+0x32>
 8003656:	f04f 37ff 	mov.w	r7, #4294967295
 800365a:	4638      	mov	r0, r7
 800365c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	1a98      	subs	r0, r3, r2
 8003664:	6963      	ldr	r3, [r4, #20]
 8003666:	b2f6      	uxtb	r6, r6
 8003668:	4283      	cmp	r3, r0
 800366a:	4637      	mov	r7, r6
 800366c:	dc05      	bgt.n	800367a <__swbuf_r+0x4e>
 800366e:	4621      	mov	r1, r4
 8003670:	4628      	mov	r0, r5
 8003672:	f7ff ffb3 	bl	80035dc <_fflush_r>
 8003676:	2800      	cmp	r0, #0
 8003678:	d1ed      	bne.n	8003656 <__swbuf_r+0x2a>
 800367a:	68a3      	ldr	r3, [r4, #8]
 800367c:	3b01      	subs	r3, #1
 800367e:	60a3      	str	r3, [r4, #8]
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	6022      	str	r2, [r4, #0]
 8003686:	701e      	strb	r6, [r3, #0]
 8003688:	6962      	ldr	r2, [r4, #20]
 800368a:	1c43      	adds	r3, r0, #1
 800368c:	429a      	cmp	r2, r3
 800368e:	d004      	beq.n	800369a <__swbuf_r+0x6e>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	07db      	lsls	r3, r3, #31
 8003694:	d5e1      	bpl.n	800365a <__swbuf_r+0x2e>
 8003696:	2e0a      	cmp	r6, #10
 8003698:	d1df      	bne.n	800365a <__swbuf_r+0x2e>
 800369a:	4621      	mov	r1, r4
 800369c:	4628      	mov	r0, r5
 800369e:	f7ff ff9d 	bl	80035dc <_fflush_r>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0d9      	beq.n	800365a <__swbuf_r+0x2e>
 80036a6:	e7d6      	b.n	8003656 <__swbuf_r+0x2a>

080036a8 <__swsetup_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <__swsetup_r+0xa8>)
 80036ac:	4605      	mov	r5, r0
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	460c      	mov	r4, r1
 80036b2:	b118      	cbz	r0, 80036bc <__swsetup_r+0x14>
 80036b4:	6a03      	ldr	r3, [r0, #32]
 80036b6:	b90b      	cbnz	r3, 80036bc <__swsetup_r+0x14>
 80036b8:	f7ff fa3c 	bl	8002b34 <__sinit>
 80036bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036c0:	0719      	lsls	r1, r3, #28
 80036c2:	d422      	bmi.n	800370a <__swsetup_r+0x62>
 80036c4:	06da      	lsls	r2, r3, #27
 80036c6:	d407      	bmi.n	80036d8 <__swsetup_r+0x30>
 80036c8:	2209      	movs	r2, #9
 80036ca:	602a      	str	r2, [r5, #0]
 80036cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	f04f 30ff 	mov.w	r0, #4294967295
 80036d6:	e033      	b.n	8003740 <__swsetup_r+0x98>
 80036d8:	0758      	lsls	r0, r3, #29
 80036da:	d512      	bpl.n	8003702 <__swsetup_r+0x5a>
 80036dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036de:	b141      	cbz	r1, 80036f2 <__swsetup_r+0x4a>
 80036e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036e4:	4299      	cmp	r1, r3
 80036e6:	d002      	beq.n	80036ee <__swsetup_r+0x46>
 80036e8:	4628      	mov	r0, r5
 80036ea:	f7ff fb2b 	bl	8002d44 <_free_r>
 80036ee:	2300      	movs	r3, #0
 80036f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	2300      	movs	r3, #0
 80036fc:	6063      	str	r3, [r4, #4]
 80036fe:	6923      	ldr	r3, [r4, #16]
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	6923      	ldr	r3, [r4, #16]
 800370c:	b94b      	cbnz	r3, 8003722 <__swsetup_r+0x7a>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003718:	d003      	beq.n	8003722 <__swsetup_r+0x7a>
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f000 f84f 	bl	80037c0 <__smakebuf_r>
 8003722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003726:	f013 0201 	ands.w	r2, r3, #1
 800372a:	d00a      	beq.n	8003742 <__swsetup_r+0x9a>
 800372c:	2200      	movs	r2, #0
 800372e:	60a2      	str	r2, [r4, #8]
 8003730:	6962      	ldr	r2, [r4, #20]
 8003732:	4252      	negs	r2, r2
 8003734:	61a2      	str	r2, [r4, #24]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	b942      	cbnz	r2, 800374c <__swsetup_r+0xa4>
 800373a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800373e:	d1c5      	bne.n	80036cc <__swsetup_r+0x24>
 8003740:	bd38      	pop	{r3, r4, r5, pc}
 8003742:	0799      	lsls	r1, r3, #30
 8003744:	bf58      	it	pl
 8003746:	6962      	ldrpl	r2, [r4, #20]
 8003748:	60a2      	str	r2, [r4, #8]
 800374a:	e7f4      	b.n	8003736 <__swsetup_r+0x8e>
 800374c:	2000      	movs	r0, #0
 800374e:	e7f7      	b.n	8003740 <__swsetup_r+0x98>
 8003750:	20000048 	.word	0x20000048

08003754 <_sbrk_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	@ (8003770 <_sbrk_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd f912 	bl	8000988 <_sbrk>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_sbrk_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_sbrk_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	200002a0 	.word	0x200002a0

08003774 <__swhatbuf_r>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	460c      	mov	r4, r1
 8003778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800377c:	2900      	cmp	r1, #0
 800377e:	b096      	sub	sp, #88	@ 0x58
 8003780:	4615      	mov	r5, r2
 8003782:	461e      	mov	r6, r3
 8003784:	da0d      	bge.n	80037a2 <__swhatbuf_r+0x2e>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	bf14      	ite	ne
 8003792:	2340      	movne	r3, #64	@ 0x40
 8003794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003798:	2000      	movs	r0, #0
 800379a:	6031      	str	r1, [r6, #0]
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	b016      	add	sp, #88	@ 0x58
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	466a      	mov	r2, sp
 80037a4:	f000 f848 	bl	8003838 <_fstat_r>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	dbec      	blt.n	8003786 <__swhatbuf_r+0x12>
 80037ac:	9901      	ldr	r1, [sp, #4]
 80037ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80037b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80037b6:	4259      	negs	r1, r3
 80037b8:	4159      	adcs	r1, r3
 80037ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037be:	e7eb      	b.n	8003798 <__swhatbuf_r+0x24>

080037c0 <__smakebuf_r>:
 80037c0:	898b      	ldrh	r3, [r1, #12]
 80037c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037c4:	079d      	lsls	r5, r3, #30
 80037c6:	4606      	mov	r6, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	d507      	bpl.n	80037dc <__smakebuf_r+0x1c>
 80037cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	2301      	movs	r3, #1
 80037d6:	6163      	str	r3, [r4, #20]
 80037d8:	b003      	add	sp, #12
 80037da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037dc:	ab01      	add	r3, sp, #4
 80037de:	466a      	mov	r2, sp
 80037e0:	f7ff ffc8 	bl	8003774 <__swhatbuf_r>
 80037e4:	9f00      	ldr	r7, [sp, #0]
 80037e6:	4605      	mov	r5, r0
 80037e8:	4639      	mov	r1, r7
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7ff fb16 	bl	8002e1c <_malloc_r>
 80037f0:	b948      	cbnz	r0, 8003806 <__smakebuf_r+0x46>
 80037f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f6:	059a      	lsls	r2, r3, #22
 80037f8:	d4ee      	bmi.n	80037d8 <__smakebuf_r+0x18>
 80037fa:	f023 0303 	bic.w	r3, r3, #3
 80037fe:	f043 0302 	orr.w	r3, r3, #2
 8003802:	81a3      	strh	r3, [r4, #12]
 8003804:	e7e2      	b.n	80037cc <__smakebuf_r+0xc>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	6020      	str	r0, [r4, #0]
 800380a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380e:	81a3      	strh	r3, [r4, #12]
 8003810:	9b01      	ldr	r3, [sp, #4]
 8003812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003816:	b15b      	cbz	r3, 8003830 <__smakebuf_r+0x70>
 8003818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800381c:	4630      	mov	r0, r6
 800381e:	f000 f81d 	bl	800385c <_isatty_r>
 8003822:	b128      	cbz	r0, 8003830 <__smakebuf_r+0x70>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	89a3      	ldrh	r3, [r4, #12]
 8003832:	431d      	orrs	r5, r3
 8003834:	81a5      	strh	r5, [r4, #12]
 8003836:	e7cf      	b.n	80037d8 <__smakebuf_r+0x18>

08003838 <_fstat_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4d07      	ldr	r5, [pc, #28]	@ (8003858 <_fstat_r+0x20>)
 800383c:	2300      	movs	r3, #0
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	f7fd f877 	bl	8000938 <_fstat>
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d102      	bne.n	8003854 <_fstat_r+0x1c>
 800384e:	682b      	ldr	r3, [r5, #0]
 8003850:	b103      	cbz	r3, 8003854 <_fstat_r+0x1c>
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	bd38      	pop	{r3, r4, r5, pc}
 8003856:	bf00      	nop
 8003858:	200002a0 	.word	0x200002a0

0800385c <_isatty_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	4d06      	ldr	r5, [pc, #24]	@ (8003878 <_isatty_r+0x1c>)
 8003860:	2300      	movs	r3, #0
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	602b      	str	r3, [r5, #0]
 8003868:	f7fd f876 	bl	8000958 <_isatty>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d102      	bne.n	8003876 <_isatty_r+0x1a>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	b103      	cbz	r3, 8003876 <_isatty_r+0x1a>
 8003874:	6023      	str	r3, [r4, #0]
 8003876:	bd38      	pop	{r3, r4, r5, pc}
 8003878:	200002a0 	.word	0x200002a0

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	bf00      	nop
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
